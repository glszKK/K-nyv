<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
	    <mediaobject>
                <imageobject>
                    <imagedata fileref="img/ant.png" scale="100" />
                </imageobject>
        </mediaobject>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Myrmecologist">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Myrmecologist</link>               
        </para>
        <para>
            Ebben a programban a hangyák viselkedését és mozgását fogjuk reprezentálni. Mint tudjuk a hangyák feromon nyomokat hagynak maguk után
            hogy megjelöljék az útvonalukat és ha egy másik hangya belebotlik ebbe a feromon nyomba, akkor azt kezdi el követni. Ez segíti őket a
            tájékozódásban. Ám az elhagyott feromon nyomok kezdetben zöld szinűek de elkezdenek halványodni abban az esetben ha egy másik hangya
            rá nem téved a nyomra. Ebben a programban pont ez fogjuk megcsinálni. Elég összetett programról van szó így a megszokottaktól eltérően
            itt több scriptre van szükségünk.
            Az első fájlunk neve az ant.h, melyben a hangyák mozgását és koordinátájukat adjuk meg(x,y,dir). Típusdefiniálnunk is kell, hisz nem csak
            egy hangya útját szeretnénk megnézni,hanem sok sok hangyájét.
        </para> 
	    <programlisting language="c++"><![CDATA[
	    class Ant
{

public:
    int x;
    int y;
    int dir;

    Ant(int x, int y): x(x), y(y) {
        
        dir = qrand() % 8;
        
    }

};

typedef std::vector<Ant> Ants;
]]></programlisting>	    

            <para>
                A következő fájlunkban adjuk meg az ablak tulajdonságát, melyet QMainWindow parancsal hozunk létre. Itt tudjuk megadni 
                hogy az ablak milyen széles és magas legyen pixelekben, a cellwidht és cellheigh pedig a cellák magasságát mutatja meg,
                ahol a hangyák mozognak. A key eventeket is itt találjuk amik ebben a programban nem nagy számba vannak jelen,
                van egy pause parancs melyet a P vagy a Q betű lenyomásával érhetünk el, és van a kilépés parancs melyet az ESC lenyomásával érünk el.
                Itt csak a header filet mutatom meg, de a forrásban elérhető a cpp file is.
           </para>
           <para>
               Antwin.h
           </para>
	    <programlisting language="c++"><![CDATA[
	    #ifndef ANTWIN_H
#define ANTWIN_H

#include <QMainWindow>
#include <QPainter>
#include <QString>
#include <QCloseEvent>
#include "antthread.h"
#include "ant.h"

class AntWin : public QMainWindow
{
    Q_OBJECT

public:
    AntWin(int width = 100, int height = 75,
           int delay = 120, int numAnts = 100,
           int pheromone = 10, int nbhPheromon = 3,
           int evaporation = 2, int cellDef = 1,
           int min = 2, int max = 50,
           int cellAntMax = 4, QWidget *parent = 0);

    AntThread* antThread;

    void closeEvent ( QCloseEvent *event ) {

        antThread->finish();
        antThread->wait();
        event->accept();
    }

    void keyPressEvent ( QKeyEvent *event )
    {

        if ( event->key() == Qt::Key_P ) {
            antThread->pause();
        } else if ( event->key() == Qt::Key_Q
                    ||  event->key() == Qt::Key_Escape ) {
            close();
        }

    }

    virtual ~AntWin();
    void paintEvent(QPaintEvent*);

private:

    int ***grids;
    int **grid;
    int gridIdx;
    int cellWidth;
    int cellHeight;
    int width;
    int height;
    int max;
    int min;
    Ants* ants;

public slots :
    void step ( const int );

};

#endif
]]></programlisting>

               <para>
                   Az AntThread végzi a számításokat és itt vannak a program eventjei is, kiszámolja a cellák feromonértékeket
                   és a hangyák irányát is. A main.cpp-ben leírt utasítások szerint ezzel a parancsal tudjuk futtatni a programot:
               </para>
                   <programlisting>./myrmecologist -w 250 -m 150 -n 400 -t 10 -p 5 -f 80 -d 0 -a 255 -i 3 -s 3  -c 22
                   </programlisting>
               <para>
                   A betűk különféle kapcsolókat jelentenek: 
               </para>
               <para>
                  - A cellák beállítását(szélességét,magasságát, és azt hogy hány oszlopból álljon) a -w és az -m kapcsolóval tudjuk változtatni
               </para>
               <para>
                  - A hangyák számát az -n kapcsolóval.
               </para>
               <para>
                  - A -t kapcsolóval azt tudjuk beállítani hogy a hangyák léptei milyen gyakoriak legyenek.
               </para>
               <para>
                  - A feromonok párolgását a -p kapcsolóval állítjuk be.
               </para>
               <para>
                  - A -d kapcsolóval állítjuk be azt hogy mennyivel nőjjön a feromonértéke a celláknak amint egy hangya belép abba.
               </para>
               <para>
                  - A feromonok minimumát és maximumát az -a és az -i kapcsolóval szabályozzuk
               </para>
                <para>
                  - A -s kapcsolóval azt állítjuk be hogy mennyi feromont hagyjanak a szomszédos cellákban a hangyák.
               </para>            
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://www.algosome.com/articles/conway-game-of-life-2d.html">https://www.algosome.com/articles/conway-game-of-life-2d.html</link>               
        </para>
	    <mediaobject>
                <imageobject>
                    <imagedata fileref="img/gof.png" scale="50" />
                </imageobject>
        </mediaobject>

        <para>
            Conway 1970-ben az egyik legérdekesebb sejtautomata rendszert készítette el, amit életjátéknak nevezett el, mert az egész program 
            hasonlított az élő szervezetek viselkedésére. Gondolunk itt a születésükre,halálukra,fejlődésükre vagy éppen visszafejlődésükre.
            A program egy nagy négyzethálóból áll,egy cellában csak egy sejt élhet(!), és minden sejtet 8 szomszédos cella vesz körül, 4 átlósan, 4 pedig keresztbe.
            Conway olyan szabályokat akart hogy azok ne legyenek előre megjósolhatóak, ezért sokat kisérletezett mire kiválasztotta a megfelelőeket.
            A sejtek generációról generációra változnak. Az első szabály a "Túlélés" ami azt jelenti hogy minden sejt aminek kettő vagy három
            szomszédja van az megmenekült és tovább léphet a következő generációba. A második szabály a "Halál", ez ugye az első szabályból következve
            úgy működik hogy minden sejt aminek négy vagy több szomszédja van vagy kettő és annál kevesebb azok meghalnak és nem mehetnek tovább
            a következő generációba. A harmadik szabály pedig a "Születés". Ha egy cellának pontosan három élő sejt van a szomszédjá-ban, akkor ott 
            új sejt születik. És ezeket a szabályokat követve folytatódik a végtelenségbe a program.
        </para>
	    <programlisting language="c"><![CDATA[
import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.ImageObserver;
import java.text.AttributedCharacterIterator;
import java.util.ArrayList;
import java.awt.Event;

public class game_of_life extends JFrame {
    RenderArea ra;
    private int i;
    
    public game_of_life() {
        super("Game of Life");
        this.setSize(1005, 1030);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);
        this.setVisible(true);
        this.setResizable(false);
        ra = new RenderArea();
        ra.setFocusable(true);
        ra.grabFocus();
        add(ra);

        ra.edit_mode = true;
        ra.running = true;
    }

    public void update() {
        ArrayList<ArrayList<Boolean>> entities = new ArrayList<ArrayList<Boolean>>();// = ra.entities;
        int size1 = ra.entities.size();
        int size2 = ra.entities.get(0).size();
        for(int i=0;i<size1;i++)
        {
            entities.add( new ArrayList<Boolean>());
            for(int j=0;j<size2;j++)
            {
                int alive = 0;
                
                if(ra.entities.get((size1+i-1)%size1).get((size2+j-1)%size2)) alive++;
                if(ra.entities.get((size1+i-1)%size1).get((size2+j)%size2)) alive++;
                if(ra.entities.get((size1+i-1)%size1).get((size2+j+1)%size2)) alive++;

                if(ra.entities.get((size1+i)%size1).get((size2+j-1)%size2)) alive++;
                if(ra.entities.get((size1+i)%size1).get((size2+j+1)%size2)) alive++;

                if(ra.entities.get((size1+i+1)%size1).get((size2+j-1)%size2)) alive++;
                if(ra.entities.get((size1+i+1)%size1).get((size2+j)%size2)) alive++;
                if(ra.entities.get((size1+i+1)%size1).get((size2+j+1)%size2)) alive++;
                


                /*for(int k=-1;i<2;k++)
                {
                    for(int l = -1; l < 2 ;l++)
                    {
                        if(!(k==0 && l == 0))
                        {
                            if(ra.entities.get((size1+i+k)%size1).get((size2+j+l)%size2)) alive++;
                        }
                    }
                }*/

                if(ra.entities.get(i).get(j))
                {
                    if(alive < 2 || alive > 3)
                    {
                        //ra.entities.get(i).set(j,false);
                        entities.get(i).add(false);
                    }
                    else
                    {
                        entities.get(i).add(true);
                    }
                }
                else
                {
                    if(alive == 3)
                    {
                        //ra.entities.get(i).set(j,true);
                        entities.get(i).add(true);
                    }
                    else
                    {
                        entities.get(i).add(false);
                    }
                }

            }
        }
        ra.entities = entities;

    }

    class RenderArea extends JPanel implements KeyListener {
        public ArrayList<ArrayList<Boolean>> entities;

        public int diff;
        public boolean edit_mode;
        public boolean running;
        public RenderArea() {
            super();
            setSize(1000, 1000);
            setVisible(true);
            setBackground(Color.WHITE);
            setForeground(Color.BLACK);
            setLocation(0, 0);

            diff = 20;
            

            this.addMouseListener((MouseListener) new MouseListener(){
            
                @Override
                public void mouseReleased(MouseEvent arg0) {
                    
                }
            
                @Override
                public void mousePressed(MouseEvent arg0) {
                    clicked(arg0);
                }
            
                @Override
                public void mouseExited(MouseEvent arg0) {
                    
                }
            
                @Override
                public void mouseEntered(MouseEvent arg0) {
                    
                }
            
                @Override
                public void mouseClicked(MouseEvent arg0) {
                    
                }
            }); 
            this.addKeyListener(this);
            entities = new ArrayList<ArrayList<Boolean>>();
            for(int i=0;i<1000/diff;i++)
            {
                entities.add(new ArrayList<Boolean>());
                for(int j=0;j<1000/diff;j++)
                {
                    entities.get(i).add(false);
                }
            }
            
        }

        void clicked(MouseEvent arg0)
        {
            System.out.println("Button "+(arg0.getButton()== 1 ? "Left" : "Right"));
            System.out.println("X:"+arg0.getX()/diff);
            System.out.println("Y:"+arg0.getY()/diff);
            if(edit_mode)
            {
                entities.get(arg0.getX()/diff).set(arg0.getY()/diff,!entities.get(arg0.getX()/diff).get((arg0.getY()/diff)));
                this.update(this.getGraphics());
            }
            
        }


        @Override
        public void keyTyped(KeyEvent e) {
            //System.out.println(e.getKeyChar());
        }
    
        @Override
        public void keyReleased(KeyEvent e) {
            System.out.println("Key pressed:"+e.getKeyChar());
            if(e.getKeyChar()=='e')
            {
                edit_mode = !edit_mode;
            }
            else if(e.getKeyChar()=='q')
            {
                this.running = false;
            }
            else if(e.getKeyChar()=='c')
            {
                if(edit_mode)
                {
                    for(int i=0;i<this.entities.size();i++)
                    {
                        for(int j=0;j<this.entities.get(1).size();j++)
                        {
                            this.entities.get(i).set(j,false);
                        }
                    }
                    this.update(this.getGraphics());
                }
                
            }

        }
    
        @Override
        public void keyPressed(KeyEvent e) {
            //System.out.println(e.getKeyChar());
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.clearRect(0, 0, 1000, 1000);
            for(int i=0;i<1000;i+=diff)
            {
                g.drawLine(i, 0, i, 1000);
            }
            for(int j=0;j<1000;j+=diff)
            {
                g.drawLine(0, j, 1000, j);
            }
            for(int i=0;i<1000;i+=diff)
            {
                for(int j=0;j<1000;j+=diff)
                {
                    if(entities.get(i/diff).get(j/diff))
                    {
                        g.setColor(Color.BLACK);
                    
                    }
                    else
                    {
                        g.setColor(Color.WHITE);
                    }
                    
                    g.fillRect(i+2, j+2, diff-3, diff-3);
                }
            }
        }

        

        private static final long serialVersionUID = 1L;
        
    }

    private static final long serialVersionUID = 1L;
    public static void main(String args[])
    {
        game_of_life gol = new game_of_life();
        while(gol.ra.running)
        {
            if(!gol.ra.edit_mode)gol.update();
            try{Thread.sleep(200);}
            catch(Exception ex)
            {

            }
            gol.ra.update(gol.ra.getGraphics());
        }
        gol.dispose();
    }
}]]></programlisting>
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://sourceforge.net/p/udprog/code/ci/master/tree/source/kozepes/Qt/sejtautomata/">https://sourceforge.net/p/udprog/code/ci/master/tree/source/kozepes/Qt/sejtautomata/</link>               
        </para>
        <para>
            Ez a program ugyan az mint az egyel fentebbi csak itt Qt-ben kell megírnunk, ami azt jelenti hogy
	    a qmake -project parancs kell ahhoz hogy legeneráljuk az Eletjatek.pro fájlunkat. Amint ezt a parancsot
	    beütöttük kapunk egy Makefile-t amit make parancsal tudunk lefordítani:
        </para>
	    <programlisting> $ qmake -project $ qmake Eletjatek.pro $ make $ ./Eletjatek </programlisting>
        <para>A fenti linkben elérhető az összes file ami szükséges a programunk futtatásához ezért nem linkelem be 
	      mindet egyessével, csak a main-t hogy megmutassam hogy a megszokottakhoz eltérően milyen rövid.
	</para>
	    <programlisting language="c++"><![CDATA[
	      #include <QApplication>
#include "sejtablak.h"

int main(int argc, char *argv[])
{
    QApplication a(argc, argv);
    SejtAblak w(100, 75);
    w.show();

    return a.exec();
}
]]></programlisting>	    
	    <para>
		    Ez pedig a siklókilövő mely egy sikló alakzatot indít el ami x generáció után ugyan azt a formát 
		    nyeri vissza, ez a sikló lett később a hackerek szimbóluma.
	    </para>
	    <mediaobject>
                <imageobject>
                    <imagedata fileref="img/sikló.png" scale="50" />
                </imageobject>
        </mediaobject>
	         <programlisting language="c++"><![CDATA[
	      void SejtAblak::sikloKilovo(bool **racs, int x, int y) {

    racs[y+ 6][x+ 0] = ELO;
    racs[y+ 6][x+ 1] = ELO;
    racs[y+ 7][x+ 0] = ELO;
    racs[y+ 7][x+ 1] = ELO;

    racs[y+ 3][x+ 13] = ELO;

    racs[y+ 4][x+ 12] = ELO;
    racs[y+ 4][x+ 14] = ELO;

    racs[y+ 5][x+ 11] = ELO;
    racs[y+ 5][x+ 15] = ELO;
    racs[y+ 5][x+ 16] = ELO;
    racs[y+ 5][x+ 25] = ELO;

    racs[y+ 6][x+ 11] = ELO;
    racs[y+ 6][x+ 15] = ELO;
    racs[y+ 6][x+ 16] = ELO;
    racs[y+ 6][x+ 22] = ELO;
    racs[y+ 6][x+ 23] = ELO;
    racs[y+ 6][x+ 24] = ELO;
    racs[y+ 6][x+ 25] = ELO;

    racs[y+ 7][x+ 11] = ELO;
    racs[y+ 7][x+ 15] = ELO;
    racs[y+ 7][x+ 16] = ELO;
    racs[y+ 7][x+ 21] = ELO;
    racs[y+ 7][x+ 22] = ELO;
    racs[y+ 7][x+ 23] = ELO;
    racs[y+ 7][x+ 24] = ELO;

    racs[y+ 8][x+ 12] = ELO;
    racs[y+ 8][x+ 14] = ELO;
    racs[y+ 8][x+ 21] = ELO;
    racs[y+ 8][x+ 24] = ELO;
    racs[y+ 8][x+ 34] = ELO;
    racs[y+ 8][x+ 35] = ELO;

    racs[y+ 9][x+ 13] = ELO;
    racs[y+ 9][x+ 21] = ELO;
    racs[y+ 9][x+ 22] = ELO;
    racs[y+ 9][x+ 23] = ELO;
    racs[y+ 9][x+ 24] = ELO;
    racs[y+ 9][x+ 34] = ELO;
    racs[y+ 9][x+ 35] = ELO;

    racs[y+ 10][x+ 22] = ELO;
    racs[y+ 10][x+ 23] = ELO;
    racs[y+ 10][x+ 24] = ELO;
    racs[y+ 10][x+ 25] = ELO;

    racs[y+ 11][x+ 25] = ELO;

}
]]></programlisting>   
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nbatfai/esport-talent-search">https://github.com/nbatfai/esport-talent-search</link>               
        </para>
        <para>
	     Rengeteg felméréssel, tesztel és benchmark programmal találkozhatunk az interneten amik feltérképezik és megmutatják
             a képességeinket. Találhatunk aim fejlesztő vagy épp reakcióidő fejlesztő programokat is. A BrainB Benchmark is ilyen
	     csak ez azt mutatja meg hogy mennyire vagyunk képesek követni a saját karakterünket egy játékban. A program elinditásakor 
	     pár négyzet jelenik meg, bennük egy-egy kék kör-rel a közepükön. Az első feladatunk hogy a Samu nevű négyzetet megkeressük 
	     es a kurzort ráhúzzuk a benne lévő kék kör-re és rajta kell tartanunk a kurzorunkat úgy hogy közbe az egeret lenyomva tartjuk.
	     A felmérés 10 percig tart, ezalatt újabb négyzetek jelennek meg és mindegyik mozog összevissza, a Samu nevű is. Az elején könnyen
             tudjuk követni, ám miután több négyzet is megjelenik, azután már egyre nehezebb dolgunk van. A program azt méri hogy mennyi ideig 
	     tartottuk a kurzort rajta a kék kör-ön és ha elveszítettük akkor mennyi idő alatt találtuk meg. A mérés 10 percig tart és ha végeztünk
	     az eredményt egy új fájlba kapjuk meg.     
        </para> 
	<para>
            A forrásban megtaláljuk a scripteket és a hozzá tartozó header file-kat is.
	    A main.cpp:
	</para>
		<programlisting language="c++"><![CDATA[
#include <QApplication>
#include <QTextStream>
#include <QtWidgets>
#include "BrainBWin.h"

int main ( int argc, char **argv )
{
        QApplication app ( argc, argv );

        QTextStream qout ( stdout );
        qout.setCodec ( "UTF-8" );

        qout << "\n" << BrainBWin::appName << QString::fromUtf8 ( " Copyright (C) 2017, 2018 Norbert Bátfai" ) << endl;

        qout << "This program is free software: you can redistribute it and/or modify it under" << endl;
        qout << "the terms of the GNU General Public License as published by the Free Software" << endl;
        qout << "Foundation, either version 3 of the License, or (at your option) any later" << endl;
        qout << "version.\n" << endl;

        qout << "This program is distributed in the hope that it will be useful, but WITHOUT" << endl;
        qout << "ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS" << endl;
        qout << "FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.\n" << endl;

        qout << QString::fromUtf8 ( "Ez a program szabad szoftver; terjeszthető illetve módosítható a Free Software" ) << endl;
        qout << QString::fromUtf8 ( "Foundation által kiadott GNU General Public License dokumentumában leírtak;" ) << endl;
        qout << QString::fromUtf8 ( "akár a licenc 3-as, akár (tetszőleges) későbbi változata szerint.\n" ) << endl;

        qout << QString::fromUtf8 ( "Ez a program abban a reményben kerül közreadásra, hogy hasznos lesz, de minden" ) << endl;
        qout << QString::fromUtf8 ( "egyéb GARANCIA NÉLKÜL, az ELADHATÓSÁGRA vagy VALAMELY CÉLRA VALÓ" ) << endl;
        qout << QString::fromUtf8 ( "ALKALMAZHATÓSÁGRA való származtatott garanciát is beleértve. További" ) << endl;
        qout << QString::fromUtf8 ( "részleteket a GNU General Public License tartalmaz.\n" ) << endl;

        qout << "http://gnu.hu/gplv3.html" << endl;

        QRect rect = QApplication::desktop()->availableGeometry();
        BrainBWin brainBWin ( rect.width(), rect.height() );
        brainBWin.setWindowState ( brainBWin.windowState() ^ Qt::WindowFullScreen );
        brainBWin.show();
        return app.exec();
}
]]></programlisting> 
	    
	    
    </section>
</chapter>
