<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Conway!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Hangyaszimulációk</title>
        <para>
            Írj Qt C++-ban egy hangyaszimulációs programot, a forrásaidról utólag reverse engineering jelleggel
            készíts UML osztálydiagramot is!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/10/10/myrmecologist">https://bhaxor.blog.hu/2018/10/10/myrmecologist</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Myrmecologist">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Myrmecologist</link>               
        </para>
        <para>
            Ebben a programban a hangyák viselkedését és mozgását fogjuk reprezentálni. Mint tudjuk a hangyák feromon nyomokat hagynak maguk után
            hogy megjelöljék az útvonalukat és ha egy másik hangya belebotlik ebbe a feromon nyomba, akkor azt kezdi el követni. Ez segíti őket a
            tájékozódásban. Ám az elhagyott feromon nyomok kezdetben zöld szinűek de elkezdenek halványodni abban az esetben ha egy másik hangya
            rá nem téved a nyomra. Ebben a programban pont ez fogjuk megcsinálni. Elég összetett programról van szó így a megszokottaktól eltérően
            itt több scriptre van szükségünk.
            Az első fájlunk neve az ant.h, melyben a hangyák mozgását és koordinátájukat adjuk meg(x,y,dir). Típusdefiniálnunk is kell, hisz nem csak
            egy hangya útját szeretnénk megnézni,hanem sok sok hangyájét.
        </para>  
        <programlisting language='c++'>
            #ifndef ANT_H
#define ANT_H

class Ant
{

public:
    int x;
    int y;
    int dir;

    Ant(int x, int y): x(x), y(y) {
        
        dir = qrand() % 8;
        
    }

};

typedef std::vector<Ant> Ants;

#endif
]]> </programlisting>
            <para>
                A következő fájlunkban adjuk meg az ablak tulajdonságát, melyet QMainWindow parancsal hozunk létre. Itt tudjuk megadni 
                hogy az ablak milyen széles és magas legyen pixelekben, a cellwidht és cellheigh pedig a cellák magasságát mutatja meg,
                ahol a hangyák mozognak. A key eventeket is itt találjuk amik ebben a programban nem nagy számba vannak jelen,
                van egy pause parancs melyet a P vagy a Q betű lenyomásával érhetünk el, és van a kilépés parancs melyet az ESC lenyomásával érünk el.
                Itt csak a header filet mutatom meg, de a forrásban elérhető a cpp file is.
           </para>
           <para>
               Antwin.h
           </para>
           <programlisting language='c++'>
               #ifndef ANTWIN_H
#define ANTWIN_H

#include <QMainWindow>
#include <QPainter>
#include <QString>
#include <QCloseEvent>
#include "antthread.h"
#include "ant.h"

class AntWin : public QMainWindow
{
    Q_OBJECT

public:
    AntWin(int width = 100, int height = 75,
           int delay = 120, int numAnts = 100,
           int pheromone = 10, int nbhPheromon = 3,
           int evaporation = 2, int cellDef = 1,
           int min = 2, int max = 50,
           int cellAntMax = 4, QWidget *parent = 0);

    AntThread* antThread;

    void closeEvent ( QCloseEvent *event ) {

        antThread->finish();
        antThread->wait();
        event->accept();
    }

    void keyPressEvent ( QKeyEvent *event )
    {

        if ( event->key() == Qt::Key_P ) {
            antThread->pause();
        } else if ( event->key() == Qt::Key_Q
                    ||  event->key() == Qt::Key_Escape ) {
            close();
        }

    }

    virtual ~AntWin();
    void paintEvent(QPaintEvent*);

private:

    int ***grids;
    int **grid;
    int gridIdx;
    int cellWidth;
    int cellHeight;
    int width;
    int height;
    int max;
    int min;
    Ants* ants;

public slots :
    void step ( const int &);

};

#endif
               ]]> </programlisting>
               <para>
                   Az AntThread végzi a számításokat és itt vannak a program eventjei is, kiszámolja a cellák feromonértékeket
                   és a hangyák irányát is. A main.cpp-ben leírt utasítások szerint ezzel a parancsal tudjuk futtatni a programot:
               </para>
                   <programlisting>./myrmecologist -w 250 -m 150 -n 400 -t 10 -p 5 -f 80 -d 0 -a 255 -i 3 -s 3  -c 22
                   </programlisting>
               <para>
                   A betűk különféle kapcsolókat jelentenek:
               </para>
               <para>
                  - A cellák beállítását(szélességét,magasságát, és azt hogy hány oszlopból álljon) a -w és az -m kapcsolóval tudjuk változtatni
               </para>
               <para>
                  - A hangyák számát az -n kapcsolóval.
               </para>
               <para>
                  - A -t kapcsolóval azt tudjuk beállítani hogy a hangyák léptei milyen gyakoriak legyenek.
               </para>
               <para>
                  - A feromonok párolgását a -p kapcsolóval állítjuk be.
               </para>
               <para>
                  - A -d kapcsolóval állítjuk be azt hogy mennyivel nőjjön a feromonértéke a celláknak amint egy hangya belép abba.
               </para>
               <para>
                  - A feromonok minimumát és maximumát az -a és az -i kapcsolóval szabályozzuk
               </para>
                <para>
                  - A -s kapcsolóval azt állítjuk be hogy mennyi feromont hagyjanak a szomszédos cellákban a hangyák.
               </para>            
    </section>        
    <section>
        <title>Java életjáték</title>
        <para>
            Írd meg Java-ban a John Horton Conway-féle életjátékot, 
            valósítsa meg a sikló-kilövőt!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>Qt C++ életjáték</title>
        <para>
            Most Qt C++-ban!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        
    <section>
        <title>BrainB Benchmark</title>
        <para>
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: <link xlink:href=""></link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>            
    </section>        

</chapter>                
