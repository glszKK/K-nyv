<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Welch!</title>
        <keywordset>
            <keyword/>
        </keywordset> 
    </info>
    <section>
        <title>Első osztályom</title>
        <para>
            Valósítsd meg C++-ban és Java-ban az módosított polártranszformációs algoritmust! A matek háttér 
            teljesen irreleváns, csak annyiban érdekes, hogy az algoritmus egy számítása során két normálist
            számol ki, az egyiket elspájzolod és egy további logikai taggal az osztályban jelzed, hogy van vagy
            nincs eltéve kiszámolt szám.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/glszKK/Welch">https://github.com/glszKK/Welch</link>         
        </para>
        <para>
            Ennek a feladatnak 2 része van, vagyis igazából a feladatunk az egy viszont két különfajta programozási nyelvel
            kell bemutatnuk. A programunk feladata/célja az hogy megmutassa hogy a programozás milyen természetes is.
	    A programunkat úgy kezdjük hogy létrehozunk egy Polargen nevű osztályt aminek két része van 
	    egy private és egy public rész. Ennek a két résznek a nevükből következtethetünk hogy hogy is működnek. A public 
		résznek az elemei a class-on kívül és elérhetőek még a private rész elemei nem. A konstruktorba megadtuk
		hogy nincs még eltárolt szám. Aztán jön a public double kovetkezo parancs, amibe a kovetkezo függvény megnézi hogy
		van e eltárolt szám, ha nincs generál 2 számot nekünk majd ezek közül az egyiket eltárolja a másikat visszaadja
		és még ezenkívül a logika változót igazról hamisra állítja át. Észrevehetjük hogy a Java része a feladatnak
		sokkal egyszerűbb és átláthatóbb és rövidebb is .	
        </para>
	<programlisting><![CDATA[
import java.util.Random;

public class PolarGen
{
	private double tarolt;
	private boolean nincsTarolt;
	private Random r;
	private int RAND_MAX;
	
	public PolarGen()
	{
		nincsTarolt = true;
		r = new Random();
		r.setSeed(20);
		this.RAND_MAX=100;
	}
	public PolarGen(Integer RAND_MAX)
	{
		nincsTarolt = true;
		r = new Random();
		r.setSeed(20);
		this.RAND_MAX=RAND_MAX;
	}
	
	public double kovetkezo()
	{
		if (nincsTarolt)
	    {
			
			double u1, u2, v1, v2, w;
			int i=0;
	        do
		    {
			      u1 = r.nextInt() / (RAND_MAX + 1.0);
			      u2 = r.nextInt() / (RAND_MAX + 1.0);
			      v1 = 2 * u1 - 1;
			      v2 = 2 * u2 - 1;
			      w = v1 * v1 + v2 * v2;
		    }
		    while (w > 1 && i++ < 40000000);
	        double r = Math.sqrt ((2 * Math.log10(w)) / w);
	        tarolt = r * v2;
	        nincsTarolt = !nincsTarolt;
	        return r * v1;
	    }
	    else
	    {
	        nincsTarolt = !nincsTarolt;
	        return tarolt;
	    }
	}
}]]></programlisting>
        <para>	
        </para>
<programlisting><![CDATA[
#include <iostream>
#include <cstdlib>
#include <cmath>
#include <ctime>

class PolarGen
{
public:
  PolarGen ()
  {
    nincsTarolt = true;
    std::srand (std::time (NULL));
  }
   ~PolarGen ()
  {
  }
  double kovetkezo ()
  {
    if (nincsTarolt)
      {
        double u1, u2, v1, v2, w;
        do
    {
      u1 = std::rand () / (RAND_MAX + 1.0);
      u2 = std::rand () / (RAND_MAX + 1.0);
      v1 = 2 * u1 - 1;
      v2 = 2 * u2 - 1;
      w = v1 * v1 + v2 * v2;
    }
        while (w > 1);

        double r = std::sqrt ((-2 * std::log (w)) / w);

        tarolt = r * v2;
        nincsTarolt = !nincsTarolt;

        return r * v1;
      }
    else
      {
        nincsTarolt = !nincsTarolt;
        return tarolt;
      }
  }



private:
  bool nincsTarolt;
  double tarolt;

};


int
main (int argc, char **argv)
{
  PolarGen pg;

  for (int i = 0; i < 10; ++i)
    std::cout << pg.kovetkezo () << std::endl;

  return 0;
}]]></programlisting>                
    </section>        

    <section>
        <title>LZW</title>
        <para>
            Valósítsd meg C-ben az LZW algoritmus fa-építését!
        </para>
       <para>
            Megoldás forrása: <link xlink:href="https://github.com/glszKK/Welch">https://github.com/glszKK/Welch</link>         
        </para>
        <para>
		Az LZW algoritmus Lempel Ziv Welch nevéhez fűződik, a fejezetünk is róla kapta a nevét. A programunk
		egy tömörítési eljárás mely veszteségmentes. Mind ezt egy bináris fá-val éri el, amit 1-ekből és 0-ákból
		készít el. Mégpedig úgy hogy ellenőrzi hogy van e már 0-ás vagy 1-es, ha nem talál, akkor létrehoz egyet
		majd visszaugrik a gyökérre. Egy új struktúrát amit Node-nak neveztünk el és ez fogja helyettesíteni a 
		csomópontokat. Ennek 3 része van, egy char típusú és két olyan rész ami magára a Node-ra mutat. 
		Majd a Node* create_empty parancsal létrehozunk egy gyökérelemet.("/") Majd ezzel a karakterrel létrehozunk
		egy csomópontot, ami a gyermekekre mutató mutatókat nullára állítja. Gyermekek alatt a 0-ákat és az 1-eseket értjük.
		Aztán jön maga a fa elkészítése amit az insert_tree függvény hoz létre. Ez először megnézi hogy az eredményünk 0-e.
		Ha igen akkor megnézi hogy van e a bal oldali csomópontnak 0-ás gyermeke, ha van akkor a következő gyermekre lép.
		Ha pedig nincs akkor létrehozza azt. Aztán az inorder parancsal rekurzívan bejárjuk a fát. Ami annyit takar 
		hogy a fa bal oldalát járja be először a parancs, majd a gyökérelemekre ugrik és innen pedig a fa jobb oldalára.
		Aztán postorder módon is bejárjuk a fát a destroy_tree parancsal. A program végéhez értünk, a main függvényhez
		itt láthatjuk hogy 10.000 elemet kell megadnunk, majd elindítjuk az inorder bejárást
		majd a fa pointereir felszabadítjuk.
	</para>
	<mediaobject>
                <imageobject>
                    <imagedata fileref="img/lzw.png" scale="50" />
                </imageobject>
        </mediaobject>
<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
typedef struct node{
	char c;
	struct node* left;
	struct node* right;
} Node;

Node* fa;
Node gyoker;

#define null NULL

Node* create_empty()
{
	Node* tmp = &gyoker;
	tmp->c= '/';
	tmp->left = null;
	tmp->right = null;
	return tmp;
}

Node* create_node(char val)
{
	Node* tmp = (Node*)malloc(sizeof(Node));
	tmp->c=val;
	tmp->left = null;
	tmp->right = null;
	return tmp;
}

void insert_tree(char val)
{
	if(val=='0')
	{
		if(fa->left == null)
		{
			fa->left = create_node(val);
			fa = &gyoker;
			//printf("Inserted into left.");
		}
		else
		{
			fa = fa->left;
		}
	}
	else
	{
		if(fa->right == null)
		{
			fa->right = create_node(val);
			fa = &gyoker;
			//printf("Inserted into left.");
		}
		else
		{
			fa = fa->right;
		}
	}
}

void inorder(Node* elem,int depth)
{

	if(elem==null)
	{
		return;
	}
	inorder(elem->left,depth+1);
	if(depth) 
	{
		char *spaces;
		spaces =(char*) malloc(sizeof(char)*depth*2+1);
		for(int i=0;i<depth;i+=2)
		{
			spaces[i]='-';
			spaces[i+1]='-';
		}
		spaces[depth]='\0';

		printf("%s%c\n",spaces,elem->c);
	}
	else
	{
		printf("%c\n",elem->c);
	}
	inorder(elem->right,depth+1);
}

void preorder(Node* elem,int depth)
{
	if(elem==null)
	{
		return;
	}
	if(depth) 
	{
		char *spaces;
		spaces =(char*) malloc(sizeof(char)*depth*2+1);
		for(int i=0;i<depth;i+=2)
		{
			spaces[i]='-';
			spaces[i+1]='-';
		}
		spaces[depth*2]='\0';

		printf("%s%c\n",spaces,elem->c);
	}
	else
	{
		printf("%c\n",elem->c);
	}
	preorder(elem->left,depth+1);	
	preorder(elem->right,depth+1);
}
void postorder(Node* elem,int depth)
{
	if(elem==null)
	{
		return;
	}
	postorder(elem->left,depth+1);	
	postorder(elem->right,depth+1);
	if(depth) 
	{
		char *spaces;
		spaces =(char*) malloc(sizeof(char)*depth*2+1);
		for(int i=0;i<depth;i+=2)
		{
			spaces[i]='-';
			spaces[i+1]='-';
		}
		spaces[depth*2]='\0';

		printf("%s%c\n",spaces,elem->c);
		free(spaces);
	}
	else
	{
		printf("%c\n",elem->c);
	}
}

void destroy_tree(Node* elem)
{
	if(elem==null)
	{
		return;
	}
	destroy_tree(elem->left);
	destroy_tree(elem->right);
	if(elem->c == gyoker.c)
	{

	}
	else
	{
		free(elem);
	}
}

void usage()
{
	printf("Használat: ./binfa KAPCSOLÓ\n");
	printf("Az KAPCSOLÓ lehet:\n");
	printf("--preorder\tA bináris fa preorder bejárása\n");
	printf("--inorder\tA bináris fa inorder bejárása\n");
	printf("--postorder\tA bináris fa postorder bejárása\n");
}

int main(int argc, char** argv)
{
	srand(time(null));
	fa = create_empty();
	//gyoker = *fa;
	for(int i=0;i<10000;i++)
	{
		int x=rand()%2;
		if(x)
		{
			insert_tree('1');
		}
		else
		{
			insert_tree('0');
		}
	}
	if(argc == 2)
	{
		if(strcmp(argv[1],"--preorder")==0)
		{
			preorder(&gyoker,0);
		}
		else if(strcmp(argv[1],"--inorder")==0)
		{
			inorder(&gyoker,0);
		}
		else if(strcmp(argv[1],"--postorder")==0)
		{
			postorder(&gyoker,0);
		}
		else
		{
			usage();
		}
	}
	else
	{
		usage();
	}
	destroy_tree(&gyoker);
	return 0;
}]]></programlisting>                
    </section>        
        
    <section>
        <title>Fabejárás</title>
        <para>
            Járd be az előző (inorder bejárású) fát pre- és posztorder is!
        </para>
	       <para>
            Megoldás videó:<link xlink:href="https://www.youtube.com/watch?v=Z32AiCcYpi8"></link>
        </para>
         <para>
            Megoldás forrása: <link xlink:href="https://github.com/glszKK/Welch">https://github.com/glszKK/Welch</link>         
        </para>
	 <para>
            Az előző feladat végén beszéltünk a bejárásról, itt is ez lesz a feladatunk csak itt más módon.
		 Először preorder módon majd posztorder módon is. Amik igazából nem sokban térnek el egymástól
		 csakis annyiban hogy más a működési sorrendjük. Preorder ejárásnál először a részfa gyökerét 
		 dolgozzuk fel majd utána a fa bal oldalát, aztán legvégül a fa jobb oldalát. A postorder módnál
		 pedig először a részfa bal oldalát dolgozzuk fel aztán a jobb oldalt majd pedig a gyökeret.
		 A két programot a magyarázat alatti scriptekkel mutatom be, az első script
		 A program megértésében és magyarázatának kidolgozásában segített: Nagy László Milán     
        </para>
        <programlisting language="c"><![CDATA[
            void kiir (Csomopont * elem, std::ostream & os)
    {
     
        if (elem != NULL)
        {

            ++melyseg;
            kiir (elem->egyesGyermek (), os);
            kiir (elem->nullasGyermek (), os);
            --melyseg;
	    for (int i = 0; i < melyseg; ++i)
             (os << "---");
            os << elem->getBetu () << "(" << melyseg - 0 << ")" << std::endl;
        }
    }]]></programlisting>
        <programlisting language="c"><![CDATA[
            void kiir (Csomopont * elem, std::ostream & os)
    {
    
        if (elem != NULL)
        {
	    for (int i = 0; i < melyseg; ++i)
             	os << "---";
            os << elem->getBetu () << "(" << melyseg - 2 << ")" << std::endl;
            ++melyseg;
	    kiir (elem->egyesGyermek (), os);
            kiir (elem->nullasGyermek (), os);
            --melyseg;
        }
    }]]></programlisting>
    </section>        
                        
    <section>
        <title>Tag a gyökér</title>
        <para>
            Az LZW algoritmust ültesd át egy C++ osztályba, legyen egy Tree és egy beágyazott Node
            osztálya. A gyökér csomópont legyen kompozícióban a fával!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/glszKK/Welch">https://github.com/glszKK/Welch</link>         
        </para>
<programlisting language="c"><![CDATA[
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define null NULL

class Binfa
{
private:
	class Node
	{
	public:
		Node(char c='/')
		{
			this->c=c;
			this->left = null;
			this->right = null;
		}
		char c;
		Node* left;
		Node* right;
	};
	Node* fa;
	

public:
	Binfa(): fa(&gyoker)
	{

	}
	
	void operator<<(char c)
	{
		if(c=='0')
		{
			if(fa->left == null)
			{
				fa->left = new Node('0');
				fa = &gyoker;
			}
			else
			{
				fa = fa->left;
			}
		}
		else
		{
			if(fa->right == null)
			{
				fa->right = new Node('1');
				fa = &gyoker;
			}
			else
			{
				fa = fa->right;
			}
		}
	}
	
	void preorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}
		preorder(elem->left,depth+1);	
		preorder(elem->right,depth+1);
	}

	void inorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		inorder(elem->left,depth+1);
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}	
		inorder(elem->right,depth+1);
	}

	void postorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		postorder(elem->left,depth+1);
		postorder(elem->right,depth+1);
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}	
	}

	void destroy_tree(Node* elem)
	{
		if(elem==null)
		{
			return;
		}
		destroy_tree(elem->left);
		destroy_tree(elem->right);
		if(elem->c!='/') delete elem;
	}

	Node gyoker;

};

void usage()
{
	printf("Használat: ./binfa KAPCSOLÓ\n");
	printf("Az KAPCSOLÓ lehet:\n");
	printf("--preorder\tA bináris fa preorder bejárása\n");
	printf("--inorder\tA bináris fa inorder bejárása\n");
	printf("--postorder\tA bináris fa postorder bejárása\n");
}

int main(int argc, char** argv)
{
	srand(time(0));
	Binfa bfa;
	for(int i=0;i<100;i++)
	{
		int x=rand()%2;
		if(x)
		{
			bfa<<'1';
		}
		else
		{
			bfa<<'0';
		}
	}
	if(argc == 2)
	{
		if(strcmp(argv[1],"--preorder")==0)
		{
			bfa.preorder(&bfa.gyoker);
		}
		else if(strcmp(argv[1],"--inorder")==0)
		{
			bfa.inorder(&bfa.gyoker);
		}
		else if(strcmp(argv[1],"--postorder")==0)
		{
			bfa.postorder(&bfa.gyoker);
		}
		else
		{
			usage();
		}
	}
	else
	{
		usage();
	}
	bfa.destroy_tree(&bfa.gyoker);
	return 0;
}]]></programlisting>
     <para>
        Az egész fejezetünk a binfára és a z3a7.cpp nevű fájra épül, így a feladatok eléggé hasonlítanak egymáshoz. Itt sincs ez másképp.
	     Az lzw binfánkat C-ben már megirtuk, most pedig C++-ban fogjuk. Az első különbség az hogy C-ben a struktúrát a csomópontok
	     helyettesítésére használtuk, C++-ban pedig egy struktúrán belül nem csak csomópontokat használhatunk, de függvényeket is megadhatunk 
	     neki. A gyökeret objektumként kezeljük és a konstruktorba ráállítjuk a famutatót a gyökérre. Megismerkedhetünk az operátorok túlterhelésével, 
	     ami annyit tesz itt hogy a bitshift operátort túlterhelem ami a fánk építését végzi
	     ugyanúgy mint a fentiekben említett insert_tree parancsunk. És ugye ha nullát kapunk eredményül és még nincs akkor azt létrehozza, mégpedig 
	     úgy hogy memóriát foglal a new-parancsal és az ujNullasGyermek parancsal befűzzük a fába. Az 1-essel is ezt kell csinálnunk csak ott 
	     természetesen nem a Nullás parancsot használjuk hanem az ujEgyesGyermek parancsot.    
     </para>
    </section>        
                
    <section>
        <title>Mutató a gyökér</title>
        <para>
            Írd át az előző forrást, hogy a gyökér csomópont ne kompozícióban, csak aggregációban legyen a 
            fával!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/glszKK/Welch">https://github.com/glszKK/Welch</link>         
        </para>
	<para>
		Ez a feladat az előzőtöl abban tér el hogy ott a gyökeret objektumként kezeltük és ráállítottuk a famutatót a gyökérre
		a konstruktorban, itt viszont más lesz a helyzet. A gyökérből egy pointert készítünk és eddig a gyökeret referenciaként
		adtuk meg de ebben a feladatban úgy fogjuk hogy a konstruktorban példányosítjuk és a new-al helyet foglalunk le neki.
		És erre állítjuk rá a fát. És végül a delete-vel szabadítjuk fel a memóriát amire már nincs szükségünk.
        </para>
<programlisting language="c"><![CDATA[
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <string.h>

#define null NULL

class Binfa
{
private:
	class Node
	{
	public:
		Node(char c='/')
		{
			this->c=c;
			this->left = null;
			this->right = null;
		}
		char c;
		Node* left;
		Node* right;
	};
	Node* fa;
	

public:
	Binfa()
	{
		gyoker=fa=new Node();
	}
	

	void operator<<(char c)
	{
		if(c=='0')
		{
			if(fa->left == null)
			{
				fa->left = new Node('0');
				fa = gyoker;
			}
			else
			{
				fa = fa->left;
			}
		}
		else
		{
			if(fa->right == null)
			{
				fa->right = new Node('1');
				fa = gyoker;
			}
			else
			{
				fa = fa->right;
			}
		}
	}
	
	void preorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}
		preorder(elem->left,depth+1);	
		preorder(elem->right,depth+1);
	}

	void inorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		inorder(elem->left,depth+1);
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}	
		inorder(elem->right,depth+1);
	}

	void postorder(Node* elem,int depth=0)
	{
		if(elem==null)
		{
			return;
		}
		postorder(elem->left,depth+1);
		postorder(elem->right,depth+1);
		if(depth) 
		{
			char *spaces;
			spaces =(char*) malloc(sizeof(char)*depth*2+1);
			for(int i=0;i<depth;i+=2)
			{
				spaces[i]='-';
				spaces[i+1]='-';
			}
			spaces[depth*2]='\0';

			printf("%s%c\n",spaces,elem->c);
		}
		else
		{
			printf("%c\n",elem->c);
		}	
	}

	void destroy_tree(Node* elem)
	{
		if(elem==null)
		{
			return;
		}
		destroy_tree(elem->left);
		destroy_tree(elem->right);
		if(elem->c!='/') delete elem;
	}

	Node* gyoker;

};

void usage()
{
	printf("Használat: ./binfa KAPCSOLÓ\n");
	printf("Az KAPCSOLÓ lehet:\n");
	printf("--preorder\tA bináris fa preorder bejárása\n");
	printf("--inorder\tA bináris fa inorder bejárása\n");
	printf("--postorder\tA bináris fa postorder bejárása\n");
}

int main(int argc, char** argv)
{
	srand(time(0));
	Binfa bfa;
	for(int i=0;i<100;i++)
	{
		int x=rand()%2;
		if(x)
		{
			bfa<<'1';
		}
		else
		{
			bfa<<'0';
		}
	}
	if(argc == 2)
	{
		if(strcmp(argv[1],"--preorder")==0)
		{
			bfa.preorder(bfa.gyoker);
		}
		else if(strcmp(argv[1],"--inorder")==0)
		{
			bfa.inorder(bfa.gyoker);
		}
		else if(strcmp(argv[1],"--postorder")==0)
		{
			bfa.postorder(bfa.gyoker);
		}
		else
		{
			usage();
		}
	}
	else
	{
		usage();
	}
	bfa.destroy_tree(bfa.gyoker);
	return 0;
}]]></programlisting>
    </section>                     

    <section>
        <title>Mozgató szemantika</title>
        <para>
            Írj az előző programhoz mozgató konstruktort és értékadást, a mozgató konstruktor legyen a mozgató
            értékadásra alapozva!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/glszKK/Welch">https://github.com/glszKK/Welch</link>         
        </para>
	<para>
               A feladatunk az előzőekben elkészített Tag a Gyökér feladathoz kapcsolódik, egyfajta kiegészítés.
	       Ismerhetjük már a másolo szemantikát, aminekúgy működik hogy az eredeti fának értékül adjuk
		a bináris fánkat úgy hogy lemásolja azokat. Itt pedig mint a neve is mutatja mozgatja őket,
		azaz a bináris fánk a gyökerének elemeit átadja a másik üres fának, majd azt a fát
		amit a programunk mozgatott annak az elemeit nullpointerre állítja, mégpedig azért 
		mert ugye konstruktort használunk, ami kitörölné az eredeti fát amiből átadtuk a gyökér elemeit
		de így hogy nullpointerre állítjuk őket, így nem fognak tőrlődni.
        </para>
<programlisting language="c"><![CDATA[
#include <iostream>		
#include <cmath>		
#include <fstream>		
#include <vector>


class LZWBinFa {
public:
    
   
     LZWBinFa () :fa ( &gyoker ) {
   
     }
     ~LZWBinFa () {
          std::cout << "LZWBinFa dtor" << std::endl;
          szabadit ( gyoker.egyesGyermek () );
          szabadit ( gyoker.nullasGyermek () );
     }
    
     LZWBinFa ( const LZWBinFa & regi ) {
          std::cout << "LZWBinFa copy ctor" << std::endl;

          gyoker.ujEgyesGyermek ( masol ( regi.gyoker.egyesGyermek (), regi.fa ) );
          gyoker.ujNullasGyermek ( masol ( regi.gyoker.nullasGyermek (), regi.fa ) );

          if ( regi.fa == & ( regi.gyoker ) )
               fa = &gyoker;

     }
    
     LZWBinFa ( LZWBinFa && regi ) {
          std::cout << "LZWBinFa move ctor" << std::endl;

          gyoker.ujEgyesGyermek ( regi.gyoker.egyesGyermek() );
          gyoker.ujNullasGyermek ( regi.gyoker.nullasGyermek() );

          regi.gyoker.ujEgyesGyermek ( nullptr );
          regi.gyoker.ujNullasGyermek ( nullptr );

     }

     
     LZWBinFa& operator<< ( char b ) {
          
          if ( b == '0' ) {
              
               if ( !fa->nullasGyermek () ) {	
                    Csomopont *uj = new Csomopont ( '0' );
                   
                    fa->ujNullasGyermek ( uj );
                  
                    fa = &gyoker;
               } else {		
                    
                    fa = fa->nullasGyermek ();
               }
          }
         
          else {
               if ( !fa->egyesGyermek () ) {
                    Csomopont *uj = new Csomopont ( '1' );
                    fa->ujEgyesGyermek ( uj );
                    fa = &gyoker;
               } else {
                    fa = fa->egyesGyermek ();
               }
          }

          return *this;
     }
     
     void kiir ( void ) {
          /
          melyseg = 0;
          
          kiir ( &gyoker, std::cout );
     }
    
     {
       szabadit (gyoker.egyesGyermek ());
       szabadit (gyoker.nullasGyermek ());
      
     }
    
     int getMelyseg ( void );
     double getAtlag ( void );
     double getSzoras ( void );

     
     friend std::ostream & operator<< ( std::ostream & os, LZWBinFa & bf ) {
          bf.kiir ( os );
          return os;
     }
     void kiir ( std::ostream & os ) {
          melyseg = 0;
          kiir ( &gyoker, os );
     }

private:
     class Csomopont {
     public:
         
          Csomopont ( char b = '/' ) :betu ( b ), balNulla ( 0 ), jobbEgy ( 0 ) {
          };
          ~Csomopont () {
          };
        
          Csomopont *nullasGyermek () const {
               return balNulla;
          }
          
          Csomopont *egyesGyermek () const {
               return jobbEgy;
          }
        
          void ujNullasGyermek ( Csomopont * gy ) {
               balNulla = gy;
          }

          void ujEgyesGyermek ( Csomopont * gy ) {
               jobbEgy = gy;
          }
          
          char getBetu () const {
               return betu;
          }
          
     private:
          
         
          char betu;
        
          Csomopont *balNulla;
          Csomopont *jobbEgy;
         
          Csomopont ( const Csomopont & );
          Csomopont & operator= ( const Csomopont & );

     };

    
     Csomopont *fa;
    
     int melyseg, atlagosszeg, atlagdb;
     double szorasosszeg;

     
     void kiir ( Csomopont * elem, std::ostream & os ) {
    
          if ( elem != NULL ) {
               ++melyseg;
               kiir ( elem->egyesGyermek (), os );
              
               for ( int i = 0; i < melyseg; ++i )
                    os << "---";
               os << elem->getBetu () << "(" << melyseg - 1 << ")" << std::endl;
               kiir ( elem->nullasGyermek (), os );
               --melyseg;
          }
     }

     void szabadit ( Csomopont * elem ) {
          
          if ( elem != NULL ) {
               szabadit ( elem->egyesGyermek () );
               szabadit ( elem->nullasGyermek () );
               
               delete elem;
          }
     }

   
     Csomopont *  masol ( Csomopont * elem, Csomopont * regifa ) {

          Csomopont * ujelem = NULL;

          if ( elem != NULL ) {
               ujelem = new Csomopont ( elem->getBetu() );

               ujelem->ujEgyesGyermek ( masol ( elem->egyesGyermek (), regifa ) );
               ujelem->ujNullasGyermek ( masol ( elem->nullasGyermek (), regifa ) );

               if ( regifa == elem )
                    fa = ujelem;

          }

          return ujelem;
     }

protected:			/
     Csomopont gyoker;
     int maxMelyseg;
     double atlag, szoras;

     void rmelyseg ( Csomopont * elem );
     void ratlag ( Csomopont * elem );
     void rszoras ( Csomopont * elem );

};


int
LZWBinFa::getMelyseg ( void )
{
     melyseg = maxMelyseg = 0;
     rmelyseg ( &gyoker );
     return maxMelyseg - 1;
}

double
LZWBinFa::getAtlag ( void )
{
     melyseg = atlagosszeg = atlagdb = 0;
     ratlag ( &gyoker );
     atlag = ( ( double ) atlagosszeg ) / atlagdb;
     return atlag;
}

double
LZWBinFa::getSzoras ( void )
{
     atlag = getAtlag ();
     szorasosszeg = 0.0;
     melyseg = atlagdb = 0;

     rszoras ( &gyoker );

     if ( atlagdb - 1 > 0 )
          szoras = std::sqrt ( szorasosszeg / ( atlagdb - 1 ) );
     else
          szoras = std::sqrt ( szorasosszeg );

     return szoras;
}

void
LZWBinFa::rmelyseg ( Csomopont * elem )
{
     if ( elem != NULL ) {
          ++melyseg;
          if ( melyseg > maxMelyseg )
               maxMelyseg = melyseg;
          rmelyseg ( elem->egyesGyermek () );
         
          rmelyseg ( elem->nullasGyermek () );
          --melyseg;
     }
}

void
LZWBinFa::ratlag ( Csomopont * elem )
{
     if ( elem != NULL ) {
          ++melyseg;
          ratlag ( elem->egyesGyermek () );
          ratlag ( elem->nullasGyermek () );
          --melyseg;
          if ( elem->egyesGyermek () == NULL && elem->nullasGyermek () == NULL ) {
               ++atlagdb;
               atlagosszeg += melyseg;
          }
     }
}

void
LZWBinFa::rszoras ( Csomopont * elem )
{
     if ( elem != NULL ) {
          ++melyseg;
          rszoras ( elem->egyesGyermek () );
          rszoras ( elem->nullasGyermek () );
          --melyseg;
          if ( elem->egyesGyermek () == NULL && elem->nullasGyermek () == NULL ) {
               ++atlagdb;
               szorasosszeg += ( ( melyseg - atlag ) * ( melyseg - atlag ) );
          }
     }
}



void
usage ( void )
{
     std::cout << "Usage: lzwtree in_file -o out_file" << std::endl;
}


void
fgv ( LZWBinFa binFa )
{
     binFa << '1';

     std::cout << binFa;

     std::cout << "depth = " << binFa.getMelyseg () << std::endl;
     std::cout << "mean = " << binFa.getAtlag () << std::endl;
     std::cout << "var = " << binFa.getSzoras () << std::endl;
}

int
main ( int argc, char *argv[] )
{
     


     if ( argc != 4 ) {

          usage ();

          return -1;
     }


     char *inFile = *++argv;


     if ( * ( ( *++argv ) + 1 ) != 'o' ) {
          usage ();
          return -2;
     }


     std::fstream beFile ( inFile, std::ios_base::in );


     if ( !beFile ) {
          std::cout << inFile << " nem letezik..." << std::endl;
          usage ();
          return -3;
     }

     std::fstream kiFile ( *++argv, std::ios_base::out );

     unsigned char b;		
     LZWBinFa binFa;		
    

     binFa << '0' << '1' << '0' << '1' << '1' << '1' << '1' << '1' << '1' << '1';

     fgv ( binFa );

     binFa << '0';

     kiFile << binFa;   

     kiFile << "depth = " << binFa.getMelyseg () << std::endl;
     kiFile << "mean = " << binFa.getAtlag () << std::endl;
     kiFile << "var = " << binFa.getSzoras () << std::endl;

     LZWBinFa binFa3 = std::move ( binFa );

     kiFile << "depth = " << binFa3.getMelyseg () << std::endl;
     kiFile << "mean = " << binFa3.getAtlag () << std::endl;
     kiFile << "var = " << binFa3.getSzoras () << std::endl;

     kiFile.close ();
     beFile.close ();


     return 0;
}]]></programlisting>
<programlisting language="c"><![CDATA[
class LZWBinFa {
public:
    
   
     LZWBinFa () :fa ( &gyoker ) {
   
     }
     ~LZWBinFa () {
          std::cout << "LZWBinFa dtor" << std::endl;
          szabadit ( gyoker.egyesGyermek () );
          szabadit ( gyoker.nullasGyermek () );
     }
    
     LZWBinFa ( const LZWBinFa & regi ) {
          std::cout << "LZWBinFa copy ctor" << std::endl;

          gyoker.ujEgyesGyermek ( masol ( regi.gyoker.egyesGyermek (), regi.fa ) );
          gyoker.ujNullasGyermek ( masol ( regi.gyoker.nullasGyermek (), regi.fa ) );

          if ( regi.fa == & ( regi.gyoker ) )
               fa = &gyoker;

     }
    
     LZWBinFa ( LZWBinFa && regi ) {
          std::cout << "LZWBinFa move ctor" << std::endl;

          gyoker.ujEgyesGyermek ( regi.gyoker.egyesGyermek() );
          gyoker.ujNullasGyermek ( regi.gyoker.nullasGyermek() );

          regi.gyoker.ujEgyesGyermek ( nullptr );
          regi.gyoker.ujNullasGyermek ( nullptr );

     }
]]>
</programlisting>
<para>
<para>
Tehát a feladatom , hogy az LZW Binfa Z3A7.cpp eredeti kódunkhoz írjunk egy mozgató konstruktort és értékadást.
	A feladat megoldása során az alábbi ponton tettük meg a változtatásokat :
	
	
</para>
    </section>                     

</chapter>                
