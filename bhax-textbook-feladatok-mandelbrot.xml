<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Mandelbrot!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>A Mandelbrot halmaz</title>
        <para>
              Írjunk olyan C++  programot, amely kiszámolja a Mandelbrot halmazt!
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Mandelbrot">https://github.com/glszKK/Mandelbrot</link>                
        </para>
	<para>
           Benoít Mandelbrot, így hívták azt a lengyel matematikust akiről a fejezetünk és a fejezetben lévő programok a nevüket kapták.
		Az első feladatban a Mandelbrot halmazt kell létrehoznunk, ami egy komplex számsíkon van ábrázolva. Es egy fura alakzatot
		vesz fel, amit a matematikában fraktálnak nevezünk. A fraktálok olyan matematikai alakzatok melyek végtelenül komplexek.
		Ezeknek a fraktáloknak két ismertető jele van, az egyik az hogy a szélei gyűrüttek, szakadásosak, töredezettek. A másik
		ismertető jel pedig az önhasonlóság. Ahhoz hogy a programunk működjön szükségünk lesz a png++ header file-ra is.
		Először megadjuk a szükséges függvényünk Rf és Df-jét. Majd létrehozunk egy üres png-t, amibe az egész 
		halmazunk kerülni fog. Majd beállítjuk hogy a komplex számsíkon hogy szeretnénk lépkedni. Majd ezeknek az értékeknek
		létrehozunk 3 változót. A megadott paraméterek és értékek által a for ciklusunk lépked.
		Majd miután befejezte a lépkedést a GeneratePNG-vel meghívjuk a függvényt.
        </para>
<programlisting language="c"><![CDATA[
#include <png++/png.hpp>
#define N 500
#define M 500
#define MAXX 0.7
#define MINX -2.0
#define MAXY 1.35
#define MINY -1.35
void GeneratePNG(int tomb[N][M]) {
  png::image<png::rgb_pixel> image(N, M);
  for (int x = 0; x < N; ++x) {
    for (int y = 0; y < M; ++y) {
      image[x][y] = png::rgb_pixel(tomb[x][y], tomb[x][y], tomb[x][y]);
    }
  }
  image.write("kimenet.png");
}
struct Komplex {
  double re, im;
};
int main() {
  int tomb[N][M];
  int i, j, k;
  double dx = (MAXX - MINX) / N;
  double dy = (MAXY - MINY) / M;
  struct Komplex C, Z, Zuj;
  int iteracio;
  for (i = 0; i < M; ++i) {
    for (j = 0; j < N; ++j) {
      C.re = MINX + j * dx;
      C.im = MAXY - i * dy;
      Z.re = 0;
      Z.im = 0;
      iteracio = 0;
      while (Z.re * Z.re + Z.im * Z.im < 4 && iteracio++ < 255) {
        Zuj.re = Z.re * Z.re - Z.im * Z.im + C.re;
        Zuj.im = 2 * Z.re * Z.im + C.im;
        Z.re = Zuj.re;
        Z.im = Zuj.im;
      }
      tomb[i][j] = 256 - iteracio;
    }
  }
  GeneratePNG(tomb);
  return 0;
}
]]></programlisting>	    
        <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelbrot.png" scale="50" />
                </imageobject>
        </mediaobject>
    </section>        
        
    <section>
        <title>A Mandelbrot halmaz a <filename>std::complex</filename> osztállyal</title>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Mandelbrot">https://github.com/glszKK/Mandelbrot</link>                
        </para>
	<para>
            Ez a feladat szinte ugyan az mint az előző, néhány apróságban térnek el egymástól. Mégpedig abban hogy itt
		a C++-ban találhatunk egy beépített komplex osztályt aminek a segítségével lépkedünk. Ezenkívül
		jobban elengedi a kezünket a program, hisz itt már betudjuk állítani saját magunknak a méreteket
		ha pedig lusták vagyunk akkor van egy basic alapértelmezett képméret és azt fogja használni a programunk.
		A dolgunk annyi még hogy a változókat int és double alakra át kell írnunk. Majd megint létrehozunk egy üres
		png-t amibe készül az egész halmazunk. Különbség még az hogy itt két forciklust ágyazunk egymásba
		amik segítségével járjuk be az egészet és legvégezetül egy színesebb alakzatot fogunk kapni.
        </para>
<programlisting language="c"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>
int
main ( int argc, char *argv[] )
{
  int szelesseg = 1920;
  int magassag = 1080;
  int iteraciosHatar = 255;
  double a = -1.9;
  double b = 0.7;
  double c = -1.3;
  double d = 1.3;
  if ( argc == 9 )
    {
      szelesseg = atoi ( argv[2] );
      magassag =  atoi ( argv[3] );
      iteraciosHatar =  atoi ( argv[4] );
      a = atof ( argv[5] );
      b = atof ( argv[6] );
      c = atof ( argv[7] );
      d = atof ( argv[8] );
    }
  else
    {
      std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d" << std::endl;
      return -1;
    }
  png::image < png::rgb_pixel > kep ( szelesseg, magassag );
  double dx = ( b - a ) / szelesseg;
  double dy = ( d - c ) / magassag;
  double reC, imC, reZ, imZ;
  int iteracio = 0;
  std::cout << "Szamitas\n";
  // j megy a sorokon
  for ( int j = 0; j < magassag; ++j )
    {
      // k megy az oszlopokon
      for ( int k = 0; k < szelesseg; ++k )
        {
          // c = (reC, imC) a halo racspontjainak
          // megfelelo komplex szam
          reC = a + k * dx;
          imC = d - j * dy;
          std::complex<double> c ( reC, imC );
          std::complex<double> z_n ( 0, 0 );
          iteracio = 0;
          while ( std::abs ( z_n ) < 4 && iteracio < iteraciosHatar )
            {
              z_n = z_n * z_n + c;
              ++iteracio;
            }
          kep.set_pixel ( k, j,
                          png::rgb_pixel ( iteracio%255, (iteracio*iteracio)%255, 0 ) );
        }
      int szazalek = ( double ) j / ( double ) magassag * 100.0;
      std::cout << "\r" << szazalek << "%" << std::flush;
    }
  kep.write ( argv[1] );
  std::cout << "\r" << argv[1] << " mentve." << std::endl;
}
]]></programlisting>
    </section>        
                
    <section>
        <title>Biomorfok</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/IJMbgRzY76E">https://youtu.be/IJMbgRzY76E</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/Biomorf</link>
        </para>
	<para>
           Ez a program azért került ebbe a csokorba mert az előzőleg megírt Mandelbrot halmazok segítségével fogjuk ezeket a biomorfokat
		is létrehozni. Ezek a biomorfok élő organizmusokhoz hasonlítanak, amiket Pickover talált fel, és ő meg volt győződve arról
		hogy valami újat fedezett fel a természetben. De mint később kiderült mégsem, hisz ilyen alakzatokat és biomorfokat akár
		számítógép és matematikai egyenletek segítségével is létrehozhatunk. A program eleje tisztára olyan mint a Mandelbrot halmazé
		annyi különbséggel hogy itt a felhasználó saját magának adhatja meg a cc konstans értékét és a küszöbszámokat.
		Itt is két egymásba ágyazott forciklust használunk, és ezek segítségével ugyanúgy végig lépkedünk a pontokon.
		De van egy harmadik for ciklus is ami a számításokat végzi, egészen addig míg a programunkban leírt határt
		el nem éri.	
        </para>
	   <mediaobject>
                <imageobject>
                    <imagedata fileref="img/pickover.png" scale="50" />
                </imageobject>
        </mediaobject> 	    
<programlisting language="c"><![CDATA[
#include <iostream>
#include "png++/png.hpp"
#include <complex>
int
main ( int argc, char *argv[] )
{
    int szelesseg = 1920;
    int magassag = 1080;
    int iteraciosHatar = 255;
    double xmin = -1.9;
    double xmax = 0.7;
    double ymin = -1.3;
    double ymax = 1.3;
    double reC = .285, imC = 0;
    double R = 10.0;
    if ( argc == 12 )
    {
        szelesseg = atoi ( argv[2] );
        magassag =  atoi ( argv[3] );
        iteraciosHatar =  atoi ( argv[4] );
        xmin = atof ( argv[5] );
        xmax = atof ( argv[6] );
        ymin = atof ( argv[7] );
        ymax = atof ( argv[8] );
        reC = atof ( argv[9] );
        imC = atof ( argv[10] );
        R = atof ( argv[11] );
    }
    else
    {
        std::cout << "Hasznalat: ./3.1.2 fajlnev szelesseg magassag n a b c d reC imC R" << std::endl;
        return -1;
    }
    png::image < png::rgb_pixel > kep ( szelesseg, magassag );
    double dx = ( xmax - xmin ) / szelesseg;
    double dy = ( ymax - ymin ) / magassag;
    std::complex<double> cc ( reC, imC );
    std::cout << "Szamitas\n";
    // j megy a sorokon
    for ( int y = 0; y < magassag; ++y )
    {
        // k megy az oszlopokon
        for ( int x = 0; x < szelesseg; ++x )
        {
            double reZ = xmin + x * dx;
            double imZ = ymax - y * dy;
            std::complex<double> z_n ( reZ, imZ );
            int iteracio = 0;
            for (int i=0; i < iteraciosHatar; ++i)
            {
                z_n = std::pow(z_n, 3) + cc;
                //z_n = std::pow(z_n, 2) + std::sin(z_n) + cc;
                if(std::real ( z_n ) > R || std::imag ( z_n ) > R)
                {
                    iteracio = i;
                    break;
                }
            }
            kep.set_pixel ( x, y,
                            png::rgb_pixel ( (iteracio*20)%255, (iteracio*40)%255, (iteracio*60)%255 ));
        }
        int szazalek = ( double ) y / ( double ) magassag * 100.0;
        std::cout << "\r" << szazalek << "%" << std::flush;
    }
    kep.write ( argv[1] );
    std::cout << "\r" << argv[1] << " mentve." << std::endl;
]]></programlisting>                       
    </section>                     

    <section>
        <title>A Mandelbrot halmaz CUDA megvalósítása</title>
        <para>
            Megoldás videó:<link xlink:href="https://youtu.be/gvaqijHlRUs"></link> 
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Mandelbrot">https://github.com/glszKK/Mandelbrot</link>                
        </para>
<programlisting language="c"><![CDATA[
#include <png++/image.hpp>
#include <png++/rgb_pixel.hpp>
#include <sys/times.h>
#include <iostream>
#define MERET 600
#define ITER_HAT 32000
__device__ int
mandel (int k, int j)
{
  // Végigzongorázza a CUDA a szélesség x magasság rácsot:
  // most eppen a j. sor k. oszlopaban vagyunk
  // számítás adatai
  float a = -2.0, b = .7, c = -1.35, d = 1.35;
  int szelesseg = MERET, magassag = MERET, iteraciosHatar = ITER_HAT;
  // a számítás
  float dx = (b - a) / szelesseg;
  float dy = (d - c) / magassag;
  float reC, imC, reZ, imZ, ujreZ, ujimZ;
  // Hány iterációt csináltunk?
  int iteracio = 0;
  // c = (reC, imC) a rács csomópontjainak
  // megfelelő komplex szám
  reC = a + k * dx;
  imC = d - j * dy;
  // z_0 = 0 = (reZ, imZ)
  reZ = 0.0;
  imZ = 0.0;
  iteracio = 0;
  // z_{n+1} = z_n * z_n + c iterációk
  // számítása, amíg |z_n| < 2 vagy még
  // nem értük el a 255 iterációt, ha
  // viszont elértük, akkor úgy vesszük,
  // hogy a kiinduláci c komplex számra
  // az iteráció konvergens, azaz a c a
  // Mandelbrot halmaz eleme
  while (reZ * reZ + imZ * imZ < 4 && iteracio < iteraciosHatar)
    {
      // z_{n+1} = z_n * z_n + c
      ujreZ = reZ * reZ - imZ * imZ + reC;
      ujimZ = 2 * reZ * imZ + imC;
      reZ = ujreZ;
      imZ = ujimZ;
      ++iteracio;
    }
  return iteracio;
}
/*
__global__ void
mandelkernel (int *kepadat)
{
  int j = blockIdx.x;
  int k = blockIdx.y;
  kepadat[j + k * MERET] = mandel (j, k);
}
*/
__global__ void
mandelkernel (int *kepadat)
{
  int tj = threadIdx.x;
  int tk = threadIdx.y;
  int j = blockIdx.x * 10 + tj;
  int k = blockIdx.y * 10 + tk;
  kepadat[j + k * MERET] = mandel (j, k);
}
void
cudamandel (int kepadat[MERET][MERET])
{
  int *device_kepadat;
  cudaMalloc ((void **) &device_kepadat, MERET * MERET * sizeof (int));
  // dim3 grid (MERET, MERET);
  // mandelkernel <<< grid, 1 >>> (device_kepadat);
  
  dim3 grid (MERET / 10, MERET / 10);
  dim3 tgrid (10, 10);
  mandelkernel <<< grid, tgrid >>> (device_kepadat);  
  
  cudaMemcpy (kepadat, device_kepadat,
	      MERET * MERET * sizeof (int), cudaMemcpyDeviceToHost);
  cudaFree (device_kepadat);
}
int
main (int argc, char *argv[])
{
  // Mérünk időt (PP 64)
  clock_t delta = clock ();
  // Mérünk időt (PP 66)
  struct tms tmsbuf1, tmsbuf2;
  times (&tmsbuf1);
  if (argc != 2)
    {
      std::cout << "Hasznalat: ./mandelpngc fajlnev";
      return -1;
    }
  int kepadat[MERET][MERET];
  cudamandel (kepadat);
  png::image < png::rgb_pixel > kep (MERET, MERET);
  for (int j = 0; j < MERET; ++j)
    {
      //sor = j;
      for (int k = 0; k < MERET; ++k)
	{
	  kep.set_pixel (k, j,
			 png::rgb_pixel (255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT,
					 255 -
					 (255 * kepadat[j][k]) / ITER_HAT));
	}
    }
  kep.write (argv[1]);
  std::cout << argv[1] << " mentve" << std::endl;
  times (&tmsbuf2);
  std::cout << tmsbuf2.tms_utime - tmsbuf1.tms_utime
    + tmsbuf2.tms_stime - tmsbuf1.tms_stime << std::endl;
  delta = clock () - delta;
  std::cout << (float) delta / CLOCKS_PER_SEC << " sec" << std::endl;
}
]]>
</programlisting>
	<para>
               Ezt a programot az NVIDIA fejlesztette ki, melynek segítségével a korábban megírt programokat és 
		Mandelbrot halmazok generálását és elkészítését jelentősen meg tudjuk növelni. A program lényege
		létrehozunk egy új gride-t ami 600x600 blokkból tevődik össze, és minden egyes blokkhoz tartozik egy szál.
		Az egész programhoz egy NVIDIA GPU szükséges. A define-al meghatározzuk a méreteket és az értékeket.
		majd a Mandelbrot halmazunkat egy mandel parancsal hozzuk létre, ám a kódunkba a mandel előtt szerepel
		egy device szó, ami annyit takar hogy jelzi hogy maga a program/függvény csakis a videókártyáról lesz elérhető.
		Aztán ott a mandelkernel, ezelőtt is áll egy szó, mégpedig a global szó. Amely azt jelzi hogy ez egy kernel függvény.
		Ezek voltak a program érdekes részei, mivel a forrást úgy kaptuk meg hogy commentelve van és minden fontos
		információ a parancsokról és a függvényekről megtalálható ott, így nem fogom leírni külön ide őket.
        </para>
    </section>                     

    <section>
        <title>Mandelbrot nagyító és utazó C++ nyelven</title>
        <para>
            Építs GUI-t a Mandelbrot algoritmusra, lehessen egérrel nagyítani egy területet, illetve egy pontot
            egérrel kiválasztva vizualizálja onnan a komplex iteréció bejárta z<subscript>n</subscript> komplex számokat!
        </para> 
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Mandelbrot">https://github.com/glszKK/Mandelbrot</link>                
        </para>
	<para>
           A következő programunk alapja megint a Mandelbrot halmaz, és mint a címben is láthatjátok, nagyításról lesz szó.
		A programunk rá fog tudni zoomolni a halmaz szélére ahol újabb halmazt/halmazokat találhatunk. De először is
		telepítenünk kell két alapvető csomagot.(sudo apt-get install libsfml-dev). Mint a fejezetben mindenhol,
		itt is a méretek beállításával kezdünk. Azután mindent úgy csinálunk mint a fejezet második feladatában
		a komplex halmaznál. A színeket itt tudjuk állítani, mégpedig az iterációk számával.
		Beállítottuk hogy az X-re kattintás esetén a programunk bezáródjón, és még azt is beállítottuk hogy
		kattintáskor a kurzor helyére zoomoljon a programunk, ezért beszélünk nagyításról.
        </para>
	  <mediaobject>
                <imageobject>
                    <imagedata fileref="img/mandelbrotzoom.png" scale="50" />
                </imageobject>
        </mediaobject>
<programlisting language="c"><![CDATA[
#include "SFML/Graphics.hpp"

//resolution of the window
const int width = 1280;
const int height = 720;

//used for complex numbers
struct complex_number
{
    long double real;
    long double imaginary;
};

void generate_mandelbrot_set(sf::VertexArray& vertexarray, int pixel_shift_x, int pixel_shift_y, int precision, float zoom)
{
    #pragma omp parallel for
    for(int i = 0; i < height; i++)
    {
        for (int j = 0; j < width; j++)
        {
           
            long double x = ((long double)j - pixel_shift_x) / zoom;
            long double y = ((long double)i - pixel_shift_y) / zoom;
            complex_number c;
            c.real = x;
            c.imaginary = y;
            complex_number z = c;
            int iterations = 0; 
            for (int k = 0; k < precision; k++)
            {
                complex_number z2;
                z2.real = z.real * z.real - z.imaginary * z.imaginary;
                z2.imaginary = 2 * z.real * z.imaginary;
                z2.real += c.real;
                z2.imaginary += c.imaginary;
                z = z2;
                iterations++;
                if (z.real * z.real + z.imaginary * z.imaginary > 4)
                    break;
            }
         
            if (iterations < precision / 4.0f)
            {
                vertexarray[i*width + j].position = sf::Vector2f(j, i);
                sf::Color color(iterations * 255.0f / (precision / 4.0f), 0, 0);
                vertexarray[i*width + j].color = color;
            }
            else if (iterations < precision / 2.0f)
            {
                vertexarray[i*width + j].position = sf::Vector2f(j, i);
                sf::Color color(0, iterations * 255.0f / (precision / 2.0f), 0);
                vertexarray[i*width + j].color = color;
            }
            else if (iterations < precision)
            {
                vertexarray[i*width + j].position = sf::Vector2f(j, i);
                sf::Color color(0, 0, iterations * 255.0f / precision);
                vertexarray[i*width + j].color = color;
            }
        }
    }
}

int main()
{
    sf::String title_string = "Mandelbrot Set Plotter"; /
    sf::RenderWindow window(sf::VideoMode(width, height), title_string);  
    window.setFramerateLimit(30); 
    sf::VertexArray pointmap(sf::Points, width * height);
    


    float zoom = 300.0f;
    int precision = 100;
    int x_shift = width / 2;
    int y_shift = height / 2;
    

    generate_mandelbrot_set(pointmap, x_shift, y_shift, precision, zoom);
    
    
    /**
     * 
     * 
     * 
     * 
     * */
    while (window.isOpen())
    {

        
        sf::Event event;
        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
        }
       
        if (sf::Mouse::isButtonPressed(sf::Mouse::Left))
        {
            sf::Vector2i position = sf::Mouse::getPosition(window);
            x_shift -= position.x - x_shift;
            y_shift -= position.y - y_shift;
            zoom *= 2;
            precision += 200;
            
            #pragma omp parallel for
            for (int i = 0; i < width*height; i++)
            {
                pointmap[i].color = sf::Color::Black;
            }
            generate_mandelbrot_set(pointmap, x_shift, y_shift, precision, zoom);
        }
        window.clear();
        window.draw(pointmap);
        window.display();
    }
    
    return 0;
}
]]>
</programlisting>
    </section>                     
                                                                                                                                                                            
    <section>
        <title>Mandelbrot nagyító és utazó Java nyelven</title>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Mandelbrot">https://github.com/glszKK/Mandelbrot</link>                
        </para>
	 <para>
             A feladatunk ugyan az lesz, egy olyan programot kell létrehoznunk ami ugyanúgy zoomolni tud, csak most Java-ba.
		 Először szokás szerint importálunk, majd létrehozunk egy osztályt. A setbounds résznél állítjuk be az
		 ablakunk méretét. Az alatta lévő setResizable pedig arra szolgál hogy ha false értéket adunk meg neki
		 akkor nem tudjuk változtatni az ablak méretét. C++-ban ugye new-al foglaltunk le memóriát, itt java-ban 
		 szintén a new parancsal fogunk, mégpedig a new JPanel parancsal. Majd létrehozzuk a gombokat is, amelyekkel
		 a számokat és a tartományt tudjuk varriálni. És legvégül találkozhatunk 2 résszel, az egyik a plotPoints
		 ami arra szolgál hogy bejárja a megadott tartományunkat és elkészítse a halmazunkat és kiszámolja azt.
		 A másik rész pedig az actionPerformed aminek a segítségével tudjuk megmondani a programunknak hogy hova is 
		 szeretnénk zoomolni.
        </para>
<programlisting><![CDATA[
import java.awt.*;
import java.awt.image.BufferedImage;
import javax.swing.*;
import java.awt.event.*;
 
public class Mandelbrot extends JFrame implements ActionListener {
 
	private JPanel ctrlPanel;
	private JPanel btnPanel;
    private int numIter = 50;
    private double zoom = 130;
    private double zoomIncrease = 100;
    private int colorIter = 20;
    private BufferedImage I;
    private double zx, zy, cx, cy, temp;
    private int xMove, yMove = 0;
    private JButton[] ctrlBtns = new JButton[9];
    private Color themeColor = new Color(150,180,200);
 
    public Mandelbrot() {
        super("Mandelbrot Set");
        setBounds(100, 100, 800, 600);
        setResizable(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        plotPoints();
        
        Container contentPane = getContentPane();
        
        contentPane.setLayout(null);
        
        
        
        
        ctrlPanel = new JPanel();
        ctrlPanel.setBounds(600,0,200,600);
        ctrlPanel.setBackground(themeColor);
        ctrlPanel.setLayout(null);
        
        btnPanel = new JPanel();
        btnPanel.setBounds(0,200,200,200);
        btnPanel.setLayout(new GridLayout(3,3));
        btnPanel.setBackground(themeColor);
        
        ctrlBtns[1] = new JButton("up");
        ctrlBtns[7] = new JButton("down");
        ctrlBtns[3] = new JButton ("left");
        ctrlBtns[5] = new JButton("right");
        ctrlBtns[2] = new JButton("+");
        ctrlBtns[0] = new JButton("-");
        ctrlBtns[8] = new JButton(">");
        ctrlBtns[6] = new JButton("<");
        ctrlBtns[4] = new JButton();
        
        contentPane.add(ctrlPanel);
        contentPane.add(new imgPanel());
        ctrlPanel.add(btnPanel);
        
        for (int x = 0; x<ctrlBtns.length;x++){
        	btnPanel.add(ctrlBtns[x]);
        	ctrlBtns[x].addActionListener(this);
        }
        
        validate();
        
    }
 
    public class imgPanel extends JPanel{
    	public imgPanel(){
    		setBounds(0,0,600,600);
    		
    	}
    	
    	@Override
    	public void paint (Graphics g){
    		super.paint(g);
    		g.drawImage(I, 0, 0, this);
    	}
    }
    
    public void plotPoints(){
    	I = new BufferedImage(getWidth(), getHeight(), BufferedImage.TYPE_INT_RGB);
        for (int y = 0; y < getHeight(); y++) {
            for (int x = 0; x < getWidth(); x++) {
                zx = zy = 0;
                cx = (x - 320+xMove) / zoom;
                cy = (y - 290+yMove) / zoom;
                int iter = numIter;
                while (zx * zx + zy * zy < 4 && iter > 0) {
                    temp = zx * zx - zy * zy + cx;
                    zy = 2 * zx * zy + cy;
                    zx = temp;
                    iter--;
                }
                I.setRGB(x, y, iter | (iter << colorIter));
            }
        }
    }
    
    public void actionPerformed(ActionEvent ae){
    	String event = ae.getActionCommand();
    	
    	switch (event){
    	case "up":
    		yMove-=100;
    		break;
    	case "down":
    		yMove+=100;
    		break;
    	case "left":
    		xMove-=100;
    		break;
    	case "right":
    		xMove+=100;
    		break;
    	case "+":
    		zoom+=zoomIncrease;
    		zoomIncrease+=100;
    		break;
    	case "-":
    		zoom-=zoomIncrease;
    		zoomIncrease-=100;
    		break;
    	case ">":
    		colorIter++;
    		break;
    	case "<":
    		colorIter--;
    		break;
    	}
    	
    	
    	
    	plotPoints();
    	validate();
    	repaint();
    }
    
    
    
 
    public static void main(String[] args) {
        new Mandelbrot().setVisible(true);
    }
}
]]>
</programlisting>
    </section
</chapter>                
