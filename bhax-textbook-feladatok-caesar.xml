    <chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>int ***</type> háromszögmátrix</title>
        <para>
           Írj egy olyan malloc és free párost használó C programot, amely helyet foglal egy alsó háromszög
            mátrixnak a szabad tárban!
        </para>
	    <para>
            Megoldás videó:<link xlink:href="https://www.youtube.com/watch?v=1MRTuKwRsB0">https://www.youtube.com/watch?v=1MRTuKwRsB0</link>  
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Caesar">https://github.com/glszKK/Caesar</link>  
        </para>
	   <programlisting language="C"><![CDATA[
	    #include <stdio.h>
#include <stdlib.h>

int
main ()
{
    int nr = 5;
    double **tm;
    
    printf("%p\n", &tm);
    
    if ((tm = (double **) malloc (nr * sizeof (double *))) == NULL)
    {
        return -1;
    }

    printf("%p\n", tm);
    
    for (int i = 0; i < nr; ++i)
    {
        if ((tm[i] = (double *) malloc ((i + 1) * sizeof (double))) == NULL)
        {
            return -1;
        }

    }

    printf("%p\n", tm[0]);    
    
    for (int i = 0; i < nr; ++i)
        for (int j = 0; j < i + 1; ++j)
            tm[i][j] = i * (i + 1) / 2 + j;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    tm[3][0] = 42.0;
    (*(tm + 3))[1] = 43.0;	// mi van, ha itt hiányzik a külső ()
    *(tm[3] + 2) = 44.0;
    *(*(tm + 3) + 3) = 45.0;

    for (int i = 0; i < nr; ++i)
    {
        for (int j = 0; j < i + 1; ++j)
            printf ("%f, ", tm[i][j]);
        printf ("\n");
    }

    for (int i = 0; i < nr; ++i)
        free (tm[i]);

    free (tm);

    return 0;
}
]]></programlisting>
	<mediaobject>
                <imageobject>
                    <imagedata fileref="img/haromszog.png" scale="50" />
                </imageobject>
        </mediaobject>
        <para>
              Elérkeztünk a harmadik fejezethez, ahol nagyrészt az EXOR-okról lesz szó. Első feladatunkban a memóriakezelésről
	      és a pointerekről fogunk tanulni. A háromszögmátrix a nevétől eltérően négyzetes, ami azt jelenti hogy a sorai és az
		oszlopainak a száma megegyeznek mert ugye így jön létre egy szabályos négyzet ha minden oldala egyenlő.
		Emellett a főátlója alatt nullák helyezkednek el. És pontosan ezaz ami kell nekünk, ez a mátrix, hisz
		a programunk ezt fogja elkészíteni. Szokásosan a header file-ok include-olásával kezdem a feladatot majd 
		létrehozzuk az int nr parancsal a soraink számát. Majd a programba bevezetjük/deklaráljuk a tm változót.
		Majd memóriát foglalunk le a doublekból álló háromszögmátrixunknak, mégpedig 8 byte-ot. Aztán jön a malloc parancs
		ami visszaad egy pointert ami nullára mutat ha a programunk hibába ütközik. A ciklusunk 0-tól 4-ig megy még el nem 
		éri az nr-t. És a lényeg az hogy az első sorunkban egyetlen egy double-t akarunk lefoglalni, a második sorunk
		mutasson olyan helyre ahol két doublenak van lefoglalva hely,és így szabályszerűen novekedik. Ezután standart outputra 
		megkapjuk az eredményt, majd egy return 0 parancsal zárjuk a programunkat.
	  </para>
    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
	<para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Caesar">https://github.com/glszKK/Caesar</link>  
        </para>
	<para>
            Ebben a feladatban egy titkosító programot fogunk írni C nyelven melynek a feladata az lesz hogy egy bármekkora
		méretű kulcs megadásával titkosít szövegeket. A kódunk elején meghatároztuk hogy a max kulcsunk 100 lehet.
		És ezt nem fogjuk tudni sehogysem megváltoztatni később sem. És még a buffer méretet is beállítjuk, ennek a maximuma 256 lesz.
		Ez azt adja meg hogy a programunk hány karaktert tud feldolgozni és beolvasni. A következő parancsunk 
		a strlen és a strncpy ahol a karakterek információit találjuk, hogy milyen hosszú a karakterunk.
		A kulcsot parancssori argumentumként kéri be. Aztán jön a while ciklus ami a read parancs segítségével elkezdi ugye olvasni a programunkat még a fálj végén
		lévő "vége" jellel nem fut össze. És ugye a programunk elején megadtuk a max buffert, tehát 256-nyi karaktert
		olvasott. És most jön a titkosítás a write-al. A programunk a bitenként megvizsgál 2 értéket, és mindig 1-et
		kapunk vissza, kivéve akkor ha a 2 érték megeggyezik. Ekkor nullát kapunk  vissza eredményül.	
	 </para>   
        <programlisting language="C"><![CDATA[
      
#include <stdio.h>
#include <unistd.h>
#include <string.h>

#define MAX_KULCS 100
#define BUFFER_MERET 256

int 
main (int argc, char **argv)
{
	char kulcs [MAX_KULCS];
	char buffer[BUFFER_MERET];
	
	int kulcs_index = 0;
	int olvasott_bajtok = 0;

	int kulcs_meret = strlen (argv[1]);
	strncpy (kulcs, argv[1], MAX_KULCS);

	while ((olvasott_bajtok = read (0, (void *) buffer, BUFFER_MERET)))
		{
			for (int i=0; i< olvasott_bajtok; ++i)
			{
				buffer[i] = buffer[i] ^ kulcs[kulcs_index];
				kulcs_index = (kulcs_index + 1) % kulcs_meret;
			}
		  write (1, buffer, olvasott_bajtok);
		}
}
]]></programlisting>         
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
	<para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Caesar">https://github.com/glszKK/Caesar</link>  
        </para>
       <programlisting language="Java"><![CDATA[
        public class ExorTitkosító {
    
    public ExorTitkosító(String kulcsSzöveg,
            java.io.InputStream bejövőCsatorna,
            java.io.OutputStream kimenőCsatorna)
            throws java.io.IOException {
        
        byte [] kulcs = kulcsSzöveg.getBytes();
        byte [] buffer = new byte[256];
        int kulcsIndex = 0;
        int olvasottBájtok = 0;

        while((olvasottBájtok =
                bejövőCsatorna.read(buffer)) != -1) {
            
            for(int i=0; i<olvasottBájtok; ++i) {
                
                buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                kulcsIndex = (kulcsIndex+1) % kulcs.length;
                
            }
            
            kimenőCsatorna.write(buffer, 0, olvasottBájtok);
            
        }
        
    }
    
    public static void main(String[] args) {
        
        try {
            
            new ExorTitkosító(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();
            
        }
        
    }
    
}
]]></programlisting>

        <para>
		A feladatunk ugyan az,titkosítás, csak most Java-ban. Aminek az előnye az hogy ugye Java-ban létre tudunk
		hozni bizonyos osztályokat amikkel különféle utasításokat tudunk végrehajtani. Ezért létre is hozunk egy ilyen
		osztályt amit ExorTitkosítonak nevezünk el. És itt kell ugye elvégezni az utasításokat ami azt jelenti
		hogy itt fogjuk a következő lépéseket definiálni. Láthatunk a main résznél egy public -ot, ami 
		azt mutatja meg hogy ez a rész a class(osztály)-on kívül is elérhető. Visszatérési értéke nincs a void miatt.
		Két újabb dologgal is találkozhatunk, a Try-al és a Catch-el, amik feladata hogy ha hibát talál
		a program akkor a catch elkapja és kíírja a hibaüzenet.	
        </para>            
    </section>        
    <section>
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
	<para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Caesar">https://github.com/glszKK/Caesar</link>  
        </para>
        <programlisting language="c"><![CDATA[
     #define MAX_TITKOS 4096
	#define OLVASAS_BUFFER 256
	#define KULCS_MERET 8
	#define _GNU_SOURCE
	
	#include <stdio.h>
	#include <unistd.h>
	#include <string.h>

		int
                tiszta_lehet (const char *titkos, int titkos_meret)
                {
                    // a tiszta szoveg valszeg tartalmazza a gyakori magyar szavakat
                    // illetve az átlagos szóhossz vizsgálatával csökkentjük a
                    // potenciális töréseket

                        && strcasestr (titkos, "hogy") && strcasestr (titkos, "nem")
                        && strcasestr (titkos, "az") && strcasestr (titkos, "ha");

                }

            void
            exor (const char kulcs[], int kulcs_meret, char titkos[], int titkos_meret)
            {

                int kulcs_index = 0;

                for (int i = 0; i < titkos_meret; ++i)
                {

                    titkos[i] = titkos[i] ^ kulcs[kulcs_index];
                    kulcs_index = (kulcs_index + 1) % kulcs_meret;

                }

            }

                int
                exor_tores (const char kulcs[], int kulcs_meret, char titkos[],
                        int titkos_meret)
                {

                    exor (kulcs, kulcs_meret, titkos, titkos_meret);

                   return tiszta_lehet (titkos, titkos_meret);

                }


                char kulcs[KULCS_MERET];
                char titkos[MAX_TITKOS];
                char *p = titkos;
                int olvasott_bajtok;

	            while ((olvasott_bajtok =
                        read (0, (void *) p,
                        	(p - titkos + OLVASAS_BUFFER <
                        	MAX_TITKOS) ? OLVASAS_BUFFER : titkos + MAX_TITKOS - p)))
                     p += olvasott_bajtok;


                for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
                        titkos[p - titkos + i] = '\0';


  for (int ii = '0'; ii <= '9'; ++ii)
    for (int ji = '0'; ji <= '9'; ++ji)
      for (int ki = '0'; ki <= '9'; ++ki)
	for (int li = '0'; li <= '9'; ++li)
	  for (int mi = '0'; mi <= '9'; ++mi)
	    for (int ni = '0'; ni <= '9'; ++ni)
	      for (int oi = '0'; oi <= '9'; ++oi)
		for (int pi = '0'; pi <= '9'; ++pi)
		  {
		    kulcs[0] = ii;
		    kulcs[1] = ji;
		    kulcs[2] = ki;
		    kulcs[3] = li;
		    kulcs[4] = mi;
		    kulcs[5] = ni;
		    kulcs[6] = oi;
		    kulcs[7] = pi;

		    if (exor_tores (kulcs, KULCS_MERET, titkos, p - titkos))
		      printf
			("Kulcs: [%c%c%c%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
			 ii, ji, ki, li, mi, ni, oi, pi, titkos);

		    // ujra EXOR-ozunk, igy nem kell egy masodik buffer  
		    exor (kulcs, KULCS_MERET, titkos, p - titkos);
		  }
]]></programlisting> 
        <para>
          Egy picit összetetteb és bonyolultabb függvényről lesz szó most, hisz több függvényből fog állni.
		A fejezet második feladatához térünk vissza, ahol ugye az előállított titkos szövegünket akarjuk 
		feltörni és visszafejteni. Ebbe lesz segítségünk az atlagos_szohossz függvényünk amely pont ezt csinálja,
		a programunk által generált kulcsal visszafejti a titkosított szöveget és vissza adja az átlagos szóhosszát.
		Ezt is úgy kezdjük mint a titkosítást, hogy meghatározzuk az értékeket, a maximumokat, a kulcs méretet
		és a buffer számot. Aztán jön a tiszta_lehet függvény ami az előzőleg említett atlagos_szohossz függvény által
		generált és kiszámolt értékkel dolgozik és megnézi hogy tiszta e a kód(amit úgy dönt el hogy
		a vizsgált szövegben van-e hogy,nem,az vagy ha szavak egyike).És ha a vizsgált szavak kozül egyiket sem
		találja meg akkor egy null értéket kapunk eredményül, ami sajnos a programunk negatívuma is.
	        Ebből következik az exor_tores 
		függvényünk ami szintén az előzőleg használt függvénykkel és eredményekkel dolgozozik, ő is megnézi
		hogy tiszta e már a fejtés alatt lévő szövegünk, és vagy 0-val vagy 1-el tér vissza.
		A main-en belül adjuk meg a kulcsunk hosszát amit a-z-ig az összes betűvel vagy 0-9-ig az összes számmal
		megadhatunk. Itt találhatjuk a for ciklusokat amik a kulcsot készítik el, és ezek próbálják meg a törést.
		És ha valamelyik ciklus sikerrel jár akkor a tiszta_lehet függvényünknek megfelel.
		A program forráskódja commentelve van így sokkal könnyebben tudjuk értelmezni a feladatot és hogy mi mit is
		csinál.
		
        </para>            
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
	       <para>
                Ebben a feladatban a neurális hálókról lesz szó, ami egy neuronokból összeálló háló. Maga a neuron egy idegsejt ami
		       az idegrendszerünk legkisebb egysége. Ezeknek a feladata a jelek összegyüjtése és továbbítása. Többekközött
		       a mesetséges intelligánciával is fogunk itt foglalkozni, mert ez a programunk képes a tanulásra. A feltételezés
		       az hogy az emberi agy információfeldolgozását ezeknek a neuronoknak, és az általuk alkotott
		       neurális hálók alkotják. Ezért próbálnak a mesterséges intelligencia továbbfejlesztésénél
		       arra törekedni hogy egy ilyen fajta hálót tudjanak reprodukálni mint az agyunkban fellelhető.
		       Mi is ezért fogjuk ezeket segítségül hívni hisz egy olyan programot szeretnénk létrehozni
		       ami alapvető logikai műveleteket képes elvégezni. A neuronokról még azt kell tudni hogy
		       akkor fognak "tüzelni" hogyha a bemenet összege meghaladnak egy limitet.
		       Es ezt szeretnénk reprezentálni. A kódunk első részében az OR-t azaz a logikai vagy-ot
		       tanítjuk meg a hálózatunknak, majd utána az AND azaz a logika és-t. Majd legvégül az EXORT
		       ami a logika kizáró vagy. Az OR-t és az AND-et hibátlanul megtanulja, ám az EXOR nem 
		       működik rendesen. Sokáig nem tudták a probléma okát, ám később pár matematikus rájött
		       hogy miért is működik hibásan az EXOR kapu. A megoldás az hogy rejtett neutronokat kell
		       még plusszba létrehoznunk a többi mellé, amik szintén segítik a tanulást. Amit a neuralnet hidden
		       parancsal tudunk beállítani.
        </para>
	    <mediaobject>
                <imageobject>
                    <imagedata fileref="img/neuralishalo.png" scale="50" />
                </imageobject>
        </mediaobject>

	  <programlisting language="C"><![CDATA[
	    library(neuralnet)

a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)

or.data <- data.frame(a1, a2, OR)

nn.or <- neuralnet(OR~a1+a2, or.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.or)

compute(nn.or, or.data[,1:2])


a1    <- c(0,1,0,1)
a2    <- c(0,0,1,1)
OR    <- c(0,1,1,1)
AND   <- c(0,0,0,1)

orand.data <- data.frame(a1, a2, OR, AND)

nn.orand <- neuralnet(OR+AND~a1+a2, orand.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.orand)

compute(nn.orand, orand.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=0, linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])



a1      <- c(0,1,0,1)
a2      <- c(0,0,1,1)
EXOR    <- c(0,1,1,0)

exor.data <- data.frame(a1, a2, EXOR)

nn.exor <- neuralnet(EXOR~a1+a2, exor.data, hidden=c(6, 4, 6), linear.output=FALSE, stepmax = 1e+07, threshold = 0.000001)

plot(nn.exor)

compute(nn.exor, exor.data[,1:2])
]]<>/programlisting>
	 
        <para>
            Az AND (és) csak abban az esetben tér vissza 1-es értékkel, ha A AND B esetében A és B is 1-es értékkel rendelkezik. Minden egyéb esetben 
            pl: A = 0 B = 0, A = 1 B = 0, A = 0 B = 1 0 értékkel tér vissza.
            
            Az OR (megengedő vagy) minden esetben 1-es értékkel tér vissza, kivéve ha A OR B esetében mind a 2 0 értéket tartalmaz. 
            pl: A = 0 B = 0 esetben A OR B = 0, minden más esetben A OR B = 1
            pl: A = 1 B = 1, A = 0 B = 1, A = 1 B = 0.
            
            Az XOR (kizáró vagy) akkor tér vissza 1-es értékkel, ha A XOR B esetében mindkét elem értéke eltérő.
            Ha a két elem értéke megegyezik A XOR B = 0 lesz. 
            pl: A = 1 B = 0 és A = 0 B = 1 esetében lesz A XOR B értéke 1.
            A = 1 B = 1, A = 0 B = 0 esetében lesz A XOR B értéke 0.
        </para>            
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            C++
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Caesar">https://github.com/glszKK/Caesar</link>  
        </para>
	    <programlisting language="C++"><![CDATA[
	    include <iostream>
#include "ml.hpp"
#include <png++/png.hpp>

int main (int argc, char **argv)
{
    png::image <png::rgb_pixel> png_image (argv[1]);

    int size = png_image.get_width() * png_image.get_height();
    
    Perceptron* p = new Perceptron (3, size, 256, 1);
    
    double* image = new double[size];
    
    for (int i = 0; i<png_image.get_width(); ++i)
        for (int j = 0; j<png_image.get_height(); ++j)
            image[i*png_image.get_width() + j] = png_image[i][j].red;
    
    double value = (*p) (image);
    
    std::cout << value << std::endl;
    
    delete p;
    delete [] image;
    
}
]]></programlisting> 
        <para>
        
		
		
		
		
		
		
		
		
		
		
		
		
        </para>            
    </section>        
        

</chapter>                
     
