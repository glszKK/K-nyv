<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
        <cover>
            <para>
                Programozás tankönyvek rövid olvasónaplói.
            </para>
        </cover>
    </info>
    <section>
        <title>Programozási alapfogalmak</title>
        <para> Programozni megtanulni nem lehet papíron, egy igazi, jó programozó mindig gépen
            gyakorol, napi 1-1,5 órát, folyamatosan fejleszti magát és kutat újabb lehetőségek után.
            De nem szabad elfelejtenünk, hogy ahhoz, hogy tényleg tudjunk programozni, bizonyos
            alapfogalmakat is ismernünk kell. Például a programozási nyelveknek három szintét
            érdemes ismerni: a gépi nyelveket, az assembly szintű nyelveket és a magas szintű
            nyelveket. A programozás egyik eleme a fordítóprogram, ami a forrásprogramokból gépi
            kódú tárgyprogramokat állít elő. Üzemelése során az alábbi lépéseket hajtja végre:
            lexikális elemzés, szintaktikai elemzés, szemantikai elemzés és kódgenerálás. Van egy
            másik technika, az interpreteres, ami utasításonként sorra veszi a forrásprogramot,
            értelmezi és végrehajtja azt. </para>
        <para>Minden programnyelvnek van saját irányelve, ezeket nevezzük hivatkozási nyelveknek.
            Ezekben vannak megállapítva a szintaktikai és szemantikai szabályok. Léteznek még
            implementációk, amik egy adott platformon létrehozott fordítóprogramok vagy
            interpreterek. Léteznek ún. IDE-k, amik programok írásához grafikus integrált fejlesztői
            felületet nyújtanak a felhasználónak. Például CodeBlocks vagy Netbeans. A
            programnyelveknek osztályai is vannak: imperatív nyelvek, deklaratív nyelvek és egyéb
            nyelvek. Beszélhetünk továbbá az alkalmazott formális jelölésrendszerről, amit a
            szintaktikai szabályok formális leírásához használunk. Ehhez a következőket használjuk
            fel: terminális, nem terminális, alternatíva, opció, iteráció. Ezekkel lehet a
            szintaktikai szabályokat formalizálni. </para>
        <para>Az adatabsztrakció első megjelenési formája az adattípus a programozási nyelvekben,
            ami egy absztrakt programozási eszköz és mindig egy konkrét programozási eszköz
            alkotórészeként jelenik meg. Az adattípusnak azonosítója van. Megkülönböztetünk típusos
            és nem típusos nyelveket. Egy adattípust három dolog határoz meg: tartomány, műveletek
            és reprezentáció. Vannak egyszerű, összetett és mutató típusok. A nevesített konstans
            olyan programozási eszköz, amelynek három szegmense van: név, típus, érték. A konstanst
            mindig deklarálni kell, és a nevével jelenik meg. Értéke a deklarációnál eldől, és nem
            változtatható meg program során. A változónak négy komponense van: név, attribútum, cím,
            érték. Kétfajta deklaráció van: explicit, implicit és automatikus. </para>
        <para>A C típusrendszere: aritmetikai (ezen belül integrális és valós) és származtatott (pl.
            tömb, függvény). Az aritmetikai típusok az egyszerű, a származtatottak az összetett
            típusok. A C nyelv csak egydimenziós tömböket kezel, amiket mindig mutató típusként
            kezel. Van automatikus deklaráció. </para>
        <para>A kifejezések szintaktikai eszközök. A program egy adott pontján ott már ismert
            értékekből új értéket határozzunk meg. Két komponensük van: érték, típus. Összetevői:
            operandusok, operátorok, kerek zárójelek. A legegyszerűbb kifejezés egy operandusból
            áll. Beszélhetünk egyoperandusú, kétoperandusú és háromoperandusú operátorokról. A
            kifejezések három alakja: prefix, infix, postfix. A kifejezés kiértékelésének nevezzük
            azt a folyamatot, amikor a kifejezés értéke és típusa is meghatározódik. Műveletek
            sorrendje történet balról-jobbra, jobbról-balra, illetve balról-jobbra a precedencia
            táblázat figyelembevételével. </para>
        <para>A C egy alapvetően kifejezésorientált nyelv. Az aritmetikai típusoknál a
            típuskényszerítés elvét vallja. A mutató típus tartományának elemeivel összeadás és
            kivonás végezhetı, azok előjel nélküli egészeknek tekinthetők. A tömb típusú eszköz neve
            mutató típusú. </para>
    </section>        
    <section>
        <title>Programozás bevezetés</title>
        <para>
            <citation>KERNIGHANRITCHIE</citation>
        </para>
        <para> A C nyelv tanulását az alapismeretekkel kezdi a könyv, a nyelv legfontosabb elemit
            mutatja be. Kihangsúlyozza, hogy ez a könyv természetesen senkit sem tesz profi
            programozóvá, nagyon fontos a rendszeres gyakorlás, így a Halló mindenki! szöveget
            kinyomtató programmal ketdu a bemutatást. Leírást ad a fordítás és a futtatás módjáról
            ezen program bemutatása során. A magyarázatot a függvénymeghívással kezdi, a függvény
            argumentum fogalmát mutatja be. </para>
        <para>A második részben a változókról mesél, a változók típusait mutatja be, a programon
            belüli megjegyzés lényegét ismerteti. Megismerkedünk a ciklus fogalmával, vagyis a
            végtelen lépésszámú while ciklussal és annak használatával. Megismerjük a for ciklust, a
            használatát és előnyeit, illetve kisebb összehasonlítást nyújt a while-lal szemben.
            Ezután a szimbolikus állandókról böngészhetünk, amiket a #define szerkezettel
            rendelhetünk hozzá egy értékhez. </para>
        <para>Olvasunk továbbá még a karakteres adatok beviteléről és kiviteléről. Egy-egy program
            segítségével szemlélteti a getchar() és a putchar() függvényeket és használatukat.
            Megismerjük a "++", "--" és "==" operátorokkal, miközben megtanuljuk, hogyan is kell
            karaktereket számolni. Természetesen a sorok és a szavak sem maradhatnak ki, eközben
            hallunk a "\n", azaz új sor karakterről és a "\t", vagyis a tabulátor karakterről,
            valamint az AND (&amp;&amp;) és az OR (||) operátorokról is. Bepillantást nyerünk az
            if-else páros struktúrájába, mechanizmusába. </para>
        <para>Megismerkedünk a tömbökkel, azok deklarálásával, használatukkal, a c nyelv beli
            indexelésükkel. Egy módszert is mutat arra, hogyan döntjük el egy karakterről, hogy
            egész-e. A következő részben a függvényeken van a hangsúly, amikből bár már mutatott
            párat, de hivatalosan most esik arról szó, hogyan írhatunk saját függvényt egy
            programba, mi a céljuk, és emlékeztet minket arra, hogy maga a main is egy függvény.
        </para>
    </section>        
    <section>
        <title>Programozás</title>
        <para>                
            <citation>BMECPP</citation>
        </para>
    </section>        
</chapter>                
