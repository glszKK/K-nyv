<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
	<para>
	    Megoldás forrása:<link xlink:href="https://github.com/glszKK/Turing/tree/master">https://github.com/glszKK/Turing/tree/master</link>
	</para>  
        <para>
	    Az első feladatban három egyszerű végtelen ciklust kell létrehoznunk, az elsőben egy olyat ami 0 százalákban dolgoztatja a magot:
        </para>
	<programlisting language="c"><![CDATA[
		#include <unistd.h>
                 int
                 main ()
                 {
                 for (;;)
                 sleep (1);
                 return 0;
                 }
 
]]></programlisting>  
	    
        <para>
           A második feladatban azt kell elérnünk hogy 100 százalékban dolgozzon a mag:		
        </para>
	<programlisting language="c"><![CDATA[
		#include <unistd.h>
                int
                main ()
                {
                for (;;){}
                return 0;
                }
             
]]></programlisting> 
	    
	<para>
            A feladat harmadik részében pedig azt kell elérnünk hogy a gépünk összes magja 100 százalékon dolgozzon, ehhez először utána kell járnunk
            annak hogy hány magos is a gépunk. Ha ez megvan utána neki kezdhetünk a feladatnak, ami annyiban változik a második feladat-tól hogy 
            annyi új threadot kell nyitnunk ahány magos a számítógépünk.
        </para>
	<programlisting language="c"><![CDATA[
		#include <unistd.h>
                int main ()
                {
                   int p1, p2, p3;

                   if(!(p1 = fork()))
                   {
                       for( ;; );
                   if(!(p2 = fork()))
                   {
                       for( ;; );
                   if(!(p3 = fork()))
                   {
                       for( ;; );
                }
                for (;;){}
                return 0;
                }
     
]]></programlisting> 
       </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
           A második feladatban azt kell megmutatnunk hogy tudunk-e olyan programot írni amely el tudja dönteni egy adott programról hogy le fog-e fagyni vagy sem. 
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
            {
	    boolean Lefagy(Program P)
	    {
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	    }
	    main(Input Q)
	    {
		Lefagy(Q)
	    }
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{
	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}
	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}
	main(Input Q)
	{
		Lefagy2(Q)
	}
}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
	<para>
	    Ez a program úgy működik/működne hogy kap bemenetként egy másik programot amiről el kéne döntenie
	    hogy működik e vagy nem sem, tehát lefagy. Ez mind szép és jó hisz nagyon megkönnytené a programozók 
            életét, de van egy nagy hibája. Ha saját magát adjuk meg bemenetnek, mert ha végtelen ciklus nincs a bemenetben akkor
            oda kerül, ha pedig van benne akkor megfog állni. Ezért nem működne helyesen a program.
	</para>	
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
	    Harmadik feladat, itt egy olyan C programra lesz szükségünk amely felcseréli két változó értékét, bármiféle logika utasítás vagy kifejezés
            használata nélkül.
        </para>
	<para>
	    Megoldás forrása:<link xlink:href="https://github.com/glszKK/Turing/tree/master">https://github.com/glszKK/Turing/tree/master</link>
	</para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
	<programlisting language="c"><![CDATA[
		#include<stdio.h>
		int main()

		{
		
                int valtozo_1 = 2,valtozo_2 = 4;
		 printf("valtozo_1=%d valtozo_2=%d\n",valtozo_1,valtozo_2);
			
		  valtozo_1 = ( valtozo_1 - valtozo_2 );
		  valtozo_2 = ( valtozo_1 + valtozo_2 );
		  valtozo_1 = ( valtozo_2 - valtozo_1 );
		 printf("valtozo_1=%d valtozo_2=%d\n",valtozo_1, valtozo_2);
		return 0;
		}             
]]></programlisting> 
	<para>
            Megoldás forrása segédváltozóval:
        </para>
	<programlisting language="c"><![CDATA[
		int main()
		{			
			int v1=1, v2=2, v3;
			v3=v1;
			v1=v2;
			v2=v3;
			return 0;
		}             
]]></programlisting>
        <para>
		A feladatban megvolt adva hogy nem használhatunk a program elkészítésekor logikai utasításokat, ami azt jelenti hogy
		matematikai egyenletekkel kell megoldanunk ezt a feladatot. Nem kell megijedni nem deriválás vagy hasonló nehézségű
		egyenletekről van itt szó, csak egyszerű alapműveletekről.(szorzás,osztás,kivonás,összeadás)
		A feladatunk tehát az hogy két változó értékét felcseréljük tehát tegyük fel hogy az a az 20 a b pedig 2.
		a=20+2=22 -> b=22-2=20 -> a=22-20=2 tehát a-ra megkaptuk a b értékét tehát a kettőt.
		Ezt még meglehet oldani az XOR-al is ami ugyan úgy felcseréli a változókat csak a bitek segítségével.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            A negyedik feladatban legy olyan programot kell létrehoznunk mely egy labdát pattogtat a karakteres konzolon, először if-ekkel, majd utána bármi féle logika utasítás
            vagy kifejezés használata nélkül.
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Turing/tree/master">https://github.com/glszKK/Turing/tree/master</link>
        </para>
	<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <curses.h>
#include <unistd.h>

int
main ( void )
{
    WINDOW *ablak;
    ablak = initscr ();

    int x = 0;
    int y = 0;

    int xnov = 1;
    int ynov = 1;

    int mx;
    int my;

    for ( ;; ) {

        getmaxyx ( ablak, my , mx );

        mvprintw ( y, x, "O" );

        refresh ();
        usleep ( 100000 );

        x = x + xnov;
        y = y + ynov;

        if ( x>=mx-1 ) { // elerte-e a jobb oldalt?
            xnov = xnov * -1;
        }
        if ( x<=0 ) { // elerte-e a bal oldalt?
            xnov = xnov * -1;
        }
        if ( y<=0 ) { // elerte-e a tetejet?
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) { // elerte-e a aljat?
            ynov = ynov * -1
        }

    }

    return 0;
}
]]></programlisting>
	<para>
	   Itt pedig ugyan az a labdapattogtatási program csak if nélkül
        </para>
	    <programlisting language="c"><![CDATA[
#include <stdio.h>
#include <stdlib.h>
#include <curses.h>
#include <unistd.h>

int
main (void)
{
    int xj = 0, xk = 0, yj = 0, yk = 0;
    int mx, my;

    WINDOW *ablak;
    ablak = initscr ();
    noecho ();
    cbreak ();
    nodelay (ablak, true);

    for (;;)
    {
	getmaxyx(ablak, my, mx);
        xj = (xj - 1) % mx;
        xk = (xk + 1) % mx;

        yj = (yj - 1) % my;
        yk = (yk + 1) % my;

        //clear ();

        mvprintw (abs (yj + (my - yk)),
                  abs (xj + (mx - xk)), "@");

        refresh ();
        usleep (150000);

    }
    return 0;
}
]]></programlisting>
         <para>
		Két új header filet használunk ( curses és unistd ) amik segítségével tudjuk a kurzorunkat mozgatni a terminálban.
		 Az első programunkat if-el a másodikat pedig if nélkül oldottuk meg. Az első feladatunkat egy ablak = initscr ()-el
		 kezdünk ahol az ablakunk adatait adjuk meg ahol a labda pattogni fog, megkell adnunk a sorok számát és az oszlopok számát is.
		 Végtelen ciklust használunk ami azt jelenti hogy egy adott sémán végtelen ideig fog menni a labdánk addig ameddig meg nem szakítjuk.
		 Ha a programunkba beleírjuk a clear(); parancsot akkor törli a labdákat de ha nem írjuk oda egy folytonos labda mintát láthatunk.
		 Az mvprint-el adjunk meg karakterünket, jelen esetben mivel egy labdáról van szó a karakterünk egy "o" betű lesz.
		 Az usleep-el pedig a labda gyorsaságát adjuk meg, minél nagyobb számot írunk be annál lassabb lesz a labdánk.
        </para>
     </section>   
	
   <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
	   Az ötödik feladatban olyan programot kell írnunk amely azt nézi meg, hogy hány bites a szó a gépeden,
           azaz mekkora az <type>int</type> mérete. Azt a while ciklust kell használnunk amit Linus Torvalds a BogoMIPS rutinjában használtt.
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://github.com/glszKK/Turing/tree/master">https://github.com/glszKK/Turing/tree/master</link>
        </para>
	<programlisting language="c"><![CDATA[
		#include <stdio.h>
		int
		main (void)
		{
 		 int h = 0;
 		 int n = 0x01;
 		 do
 		   ++h;
 		 while (n <<= 1);
 		 printf ("A szohossz ezen a gepen: %d bites\n", h);
 		 return 0;
		}            
]]></programlisting>
        <para>
		A MIPS jelentése az a "Millió utasítás másodpercenként". A bogoMIPS program melyet Linus Torvald talált ki, a gép elinditásakor
		megméri hogy meddig fut egy adott ciklus, de a nevéből is következtethetünk arra hogy itt valami nem stimmel. Hisz a bogo az angol
		bogus szóbol ered ami azt jelenti hogy nem igaz. Tehát itt is van egy kis probléma, már pedig az hogy nem egy pontos értéket 
		hanem csak egy megközelítő értéket kapunk. Egy gépi szó változója 4byte ezért 32-őt fog eredményül adni.
		A célunk az hogy nullát kapjunk eredményül, tehát addig shifteljük a biteket balra, amig azt a nullát meg nem kapjuk.	    
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Hatodik feladat, itt egy olyan programra lesz szükségünk, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét.
	     
            A programot Larry Page és Sergey Brin találták ki, akik amúgy a Google alapítói. A programmal egy weboldal fontosságát és értékét
            tudjuk megállapítani, az alapján hogy hány link mutat arra az oldalra amit ugye vizsgálunk. Minél több annál jobb! És az is számít
            hogy a linkeket milyen erősségű oldalon találjuk meg. És ez a PageRank nem a főoldaladra hivatkozott hanem aloldalanként működött.
	    Azért csak működött mert 2013 óta nem frissült ez a PageRank érték, de valójában az emberek csak egy "gagyibb" változatát láthatták
	    ennek a programnak, hisz megtudtuk egy 10-es skálán hogy mennyire erős az oldalaink PageRank száma, de ez a program ennél sokkal több.
	    És a google-nak jóval több adatot és információt add át néhány számnál.
       </para>
	 <mediaobject>
                <imageobject>
                    <imagedata fileref="img/pagerank.jpg" scale="30" />
                </imageobject>
        </mediaobject>
<programlisting language="c"><![CDATA[
		#include <stdio.h>
#include <math.h>

void
kiir (double tomb[], int db){

	int i;
	
	for (i=0; i<db; ++i){
		printf("%f\n",tomb[i]);
	}
}

double
tavolsag (double PR[], double PRv[], int n){
	
	int i;
	double osszeg=0;
	
	for (i = 0; i < n; ++i)
		osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);
	
	return sqrt(osszeg);
}

void
pagerank(double T[4][4]){
	double PR[4] = { 0.0, 0.0, 0.0, 0.0 }; //ebbe megy az eredmény
	double PRv[4] = { 1.0/4.0, 1.0/4.0, 1.0/4.0, 1.0/4.0}; //ezzel szorzok
	
	int i, j;
	
	for(;;){
		
		// ide jön a mátrix művelet		
		
		for (i=0; i<4; i++){
			PR[i]=0.0;
			for (j=0; j<4; j++){
				PR[i] = PR[i] + T[i][j]*PRv[j];
			}
		}
	
			if (tavolsag(PR,PRv,4) < 0.0000000001) 
				break;
		
		// ide meg az átpakolás PR-ből PRv-be
			
			for (i=0;i<4; i++){
				PRv[i]=PR[i];
			}	
	}
	
	kiir (PR, 4);
}

int main (void){
	double L[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  1.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  0.0}
	};	
	
	double L1[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  0.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  0.0}
	};
	
	double L2[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  0.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  1.0}
	};
	
	printf("\nAz eredeti mátrix értékeivel történő futás:\n");
	pagerank(L);
	
	printf("\nAmikor az egyik oldal semmire sem mutat:\n");
	pagerank(L1);
	
	printf("\nAmikor az egyik oldal csak magára mutat:\n");
	pagerank(L2);
	
	printf("\n");

	return 0;
}

]]></programlisting>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/glszKK/Turing/tree/master">https://github.com/glszKK/Turing/tree/master</link>
        </para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
	    A hetedik feladatban R szimulációt kell írnunk a Brun tétel demonstrálására.
        </para>
<programlisting language="C"><![CDATA[
 stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(10, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
		    
]]></programlisting>		    
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
	 </para>
	 <para>
	   A programunk a prímszámokkal foglalkozik azonbelül is az ikerprímekkel, ugye a prímszámok azok a számok amik egyel és önmagukkal 
	   oszthatóak, ikerprímnek pedig azt a két prímszámot nevezzük amik 2-vel térnek el egymástól. És azt tudjuk hogy a prímszámokból
           végtelensok létezik, de azt nem tudjuk hogy az ikerprímekből is végtelen számú van e. A prímek a végtelenbe tartanak ezért 
           feltételezzük azt hogy az ikerprímek is, de amit elkezdjük őket vizsgálni úgy veszzük észre mintha egy adott szám felé tartanának.
	   A Brun tétel azt mondja ki hogy az ikerprímek reciprokösszege egy véges értékhez konvergál, amit Brun-konstansnak nevezünk. 
	 </para>
	<mediaobject>
                <imageobject>
                    <imagedata fileref="img/brun.jpg" scale="30" />
                </imageobject>
        </mediaobject>
    </section>
	    
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Az utolsó feladatban R szimulációt kell írnunk a Monty Hall problémára.
        </para>
<programlisting language="C"><![CDATA[
kiserletek_szama=100
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }

    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

}

nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}

valtoztatesnyer = which(kiserlet==valtoztat)


sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)

		    
]]></programlisting>
        <para>
            A Monty Hall címet a program egy műsorvezetőről kapta aki a Lets make a deal című műsör volt. Aminek az volt a lényege
		hogy a játékosoknak 3 ajtó közül kellett választaniuk az egyik ajtó mögött egy óriási nyeremény lapult, a másik két ajtó
		mögött meg értéktelen nyeremények. Ez mind szép és jó hisz azt hiszi az ember hogy 3 ajtó közül nem is olyan nehéz eltalálni
		azt ami mögött a főnyeremény lapul hisz erre 33.3% esélyünk lenne. Ám itt jön a csavar, miután a játékos választott egy ajtót
		de mielőtt azt tényleg kinyitnák a műsorvezető ki nyit a maradék kettő közül választ egyet amelyik mögött nem a főnyeremény lapul
		hisz ő tudja hogy melyik ajtó mögött mi van. És ilyenkor az adott játékos módosíthatja a választását. A nagy kérdés az hogy
		megéri-e változtatni vagy sem? A válasz egyszerű, igen. Hisz amikor 3 ajtó közül kell választanuk, mint már mondtam
		33% esélyünk van arra hogy a jó ajtót választottuk, viszont miután a műsorvezető kinyit egy ajtót az esélyünk 
		a duplájára növekszik, hisz igy csak két ajtó közül kell választanunk. A programunk pedig ezeket a lehetőségeket
		vizsgálja meg. 
	</para>
	 <mediaobject>
                <imageobject>
                    <imagedata fileref="img/monty.jpg" scale="30" />
                </imageobject>
        </mediaobject>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
	</para>
    </section>
</chapter>                
